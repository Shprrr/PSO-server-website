@page "/characterBuilder"
@using PSOServerWebsite.Services
@using System.Text.RegularExpressions
@inject LevelTableService levelTableService
@inject ItemsService itemsService
@inject ItemPMTService itemPMTService

<PageTitle>Character Builder</PageTitle>

<h1>Character Builder</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container border rounded">
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Class
                    <InputSelect @bind-Value="Character.ClassRaceSelection" class="form-select" aria-label="Select a class">
                        <option value="">Select a class ...</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Humar)" value="@ClassRace.Humar">HUmar</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Hunewearl)" value="@ClassRace.Hunewearl">HUnewearl</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Hucast)" value="@ClassRace.Hucast">HUcast</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Hucaseal)" value="@ClassRace.Hucaseal">HUcaseal</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Ramar)" value="@ClassRace.Ramar">RAmar</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Ramarl)" value="@ClassRace.Ramarl">RAmarl</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Racast)" value="@ClassRace.Racast">RAcast</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Racaseal)" value="@ClassRace.Racaseal">RAcaseal</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Fomar)" value="@ClassRace.Fomar">FOmar</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Fomarl)" value="@ClassRace.Fomarl">FOmarl</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Fonewm)" value="@ClassRace.Fonewm">FOnewm</option>
                        <option selected="@(Character.ClassRaceSelection == ClassRace.Fonewearl)" value="@ClassRace.Fonewearl">FOnewearl</option>
                    </InputSelect>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Level
                    <InputNumber @bind-Value="Character.Level" DisplayName="Level" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    HP
                    <InputNumber @bind-Value="Character.HP" DisplayName="HP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP
                    <InputNumber @bind-Value="Character.TP" DisplayName="TP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATP
                    <InputNumber @bind-Value="Character.ATP" DisplayName="ATP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    DFP
                    <InputNumber @bind-Value="Character.DFP" DisplayName="DFP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    MST
                    <InputNumber @bind-Value="Character.MST" DisplayName="MST" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATA
                    <InputNumber @bind-Value="Character.ATA" DisplayName="ATA" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    EVP
                    <InputNumber @bind-Value="Character.EVP" DisplayName="EVP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    LCK
                    <InputNumber @bind-Value="Character.LCK" DisplayName="LCK" class="form-control" disabled></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    HP Material
                    <InputNumber @bind-Value="Character.HPMaterial" DisplayName="HP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP Material
                    <InputNumber @bind-Value="Character.TPMaterial" DisplayName="TP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Power Material
                    <InputNumber @bind-Value="Character.PowerMaterial" DisplayName="Power Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Def Material
                    <InputNumber @bind-Value="Character.DefMaterial" DisplayName="Def Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mind Material
                    <InputNumber @bind-Value="Character.MindMaterial" DisplayName="Mind Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Evade Material
                    <InputNumber @bind-Value="Character.EvadeMaterial" DisplayName="Evade Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Luck Material
                    <InputNumber @bind-Value="Character.LuckMaterial" DisplayName="Luck Material" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Weapon
                    <span class="form-control-plaintext form-text">@Character.WeaponName</span>
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Armor
                    <span class="form-control-plaintext form-text">@Character.ArmorName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditArmor">Edit</button>
                </label>
            </div>
            @if (Character.Armor.NumberSlots > 0)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 1
                        <span class="form-control-plaintext form-text">@Character.Unit1Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 1)">Edit</button>
                    </label>
                </div>
            }
            @if (Character.Armor.NumberSlots > 1)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 2
                        <span class="form-control-plaintext form-text">@Character.Unit2Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 2)">Edit</button>
                    </label>
                </div>
            }
            @if (Character.Armor.NumberSlots > 2)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 3
                        <span class="form-control-plaintext form-text">@Character.Unit3Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 3)">Edit</button>
                    </label>
                </div>
            }
            @if (Character.Armor.NumberSlots > 3)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 4
                        <span class="form-control-plaintext form-text">@Character.Unit4Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 4)">Edit</button>
                    </label>
                </div>
            }
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Shield
                    <span class="form-control-plaintext form-text">@Character.ShieldName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditShield">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Mag
                    <span class="form-control-plaintext form-text">@Character.MagName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditMag">Edit</button>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Shifta Level
                    <InputNumber @bind-Value="Character.ShiftaLevel" DisplayName="Shifta Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@Character.GetShiftaDebandDuration(Character.ShiftaLevel)</span>
            </div>
            <div class="col">
                <label class="form-label">
                    Deband Level
                    <InputNumber @bind-Value="Character.DebandLevel" DisplayName="Deband Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@Character.GetShiftaDebandDuration(Character.DebandLevel)</span>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">

                </label>
            </div>
        </div>
    </div>

    <div id="modalEditArmor" class="modal" onhidden.bs.modal="@(() => Character.RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Armor</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-12">
                        Armor
                        <InputSelect @bind-Value="Character.Armor.Model" class="form-select" aria-label="Select an armor">
                            <option selected="@(Character.Armor.Identifier == null)" value=""><i>~ None ~</i></option>
                            @foreach (var armor in Character.GetItemWithRequirements(armors))
                            {
                                <option selected="@(Character.Armor.Identifier == armor.Identifier)" value="@armor">@armor.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-3">
                        DFP
                        <InputNumber Value="@Character.Armor.Dfp" ValueExpression="@(() => Character.Armor.Dfp)" DisplayName="DFP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DFP Bonus
                        <InputNumber @bind-Value="Character.Armor.DfpBonus" DisplayName="DFP Bonus" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP
                        <InputNumber Value="@Character.Armor.Evp" ValueExpression="@(() => Character.Armor.Evp)" DisplayName="EVP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP Bonus
                        <InputNumber @bind-Value="Character.Armor.EvpBonus" DisplayName="EVP Bonus" class="form-control"></InputNumber>
                    </label>
                    @foreach (var statBoost in Character.Armor.GetStatBoosts())
                    {
                        <label class="form-label col col-3">
                            @statBoost.Item1
                            <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                        </label>
                    }
                    <label class="form-label col col-12">
                        Slots
                        <InputNumber @bind-Value="Character.Armor.NumberSlots" DisplayName="Slots" class="form-control"></InputNumber>
                    </label>
                </div>
                <div class="modal-footer">@Character.ArmorName</div>
            </div>
        </div>
    </div>

    <div id="modalEditUnit" class="modal" onhidden.bs.modal="@(() => Character.RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            @if (EditUnit > 0)
            {
                <div class="modal-content">
                    <div class="modal-header">
                        <span>Unit</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body container row">
                        <label class="form-label col col-12">
                            Unit
                            <InputSelect @bind-Value="EditUnitModel.Model" class="form-select" aria-label="Select a unit">
                                <option selected="@(EditUnitModel.Identifier == null)" value=""><i>~ None ~</i></option>
                                @foreach (var unit in Character.GetItemWithRequirements(units))
                                {
                                    <option selected="@(EditUnitModel.Identifier == unit.Identifier)" value="@unit">@unit.Name</option>
                                }
                            </InputSelect>
                        </label>
                        <label class="form-label col col-3 visually-hidden">
                            +/-
                            <InputNumber @bind-Value="EditUnitModel.Modifier" DisplayName="+/-" class="form-control"></InputNumber>
                        </label>
                        @foreach (var statBoost in EditUnitModel.GetStatBoosts())
                        {
                            <label class="form-label col col-3">
                                @statBoost.Item1
                                <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                            </label>
                        }
                    </div>
                    <div class="modal-footer">@EditUnitModel.ToString()</div>
                </div>
            }
        </div>
    </div>

    <div id="modalEditShield" class="modal" onhidden.bs.modal="@(() => Character.RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Shield</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-12">
                        Shield
                        <InputSelect @bind-Value="Character.Shield.Model" class="form-select" aria-label="Select a shield">
                            <option selected="@(Character.Shield.Identifier == null)" value=""><i>~ None ~</i></option>
                            @foreach (var shield in Character.GetItemWithRequirements(shields))
                            {
                                <option selected="@(Character.Shield.Identifier == shield.Identifier)" value="@shield">@shield.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-3">
                        DFP
                        <InputNumber Value="@Character.Shield.Dfp" ValueExpression="@(() => Character.Shield.Dfp)" DisplayName="DFP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DFP Bonus
                        <InputNumber @bind-Value="Character.Shield.DfpBonus" DisplayName="DFP Bonus" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP
                        <InputNumber Value="@Character.Shield.Evp" ValueExpression="@(() => Character.Shield.Evp)" DisplayName="EVP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP Bonus
                        <InputNumber @bind-Value="Character.Shield.EvpBonus" DisplayName="EVP Bonus" class="form-control"></InputNumber>
                    </label>
                    @foreach (var statBoost in Character.Shield.GetStatBoosts())
                    {
                        <label class="form-label col col-3">
                            @statBoost.Item1
                            <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                        </label>
                    }
                </div>
                <div class="modal-footer">@Character.ShieldName</div>
            </div>
        </div>
    </div>

    <div id="modalEditMag" class="modal" onhidden.bs.modal="@(() => Character.RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Mag</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-6">
                        Mag
                        <InputSelect @bind-Value="Character.Mag.Name" class="form-select" aria-label="Select a mag">
                            <option value=""><i>~ None ~</i></option>
                            @foreach (var mag in mags)
                            {
                                <option value="@mag.Name">@mag.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-6">
                        Level
                        <InputNumber Value="@Character.Mag.Level" ValueExpression="@(() => Character.Mag.Level)" DisplayName="Level" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DEF
                        <InputNumber @bind-Value="Character.Mag.Def" DisplayName="DEF" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        POW
                        <InputNumber @bind-Value="Character.Mag.Pow" DisplayName="POW" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DEX
                        <InputNumber @bind-Value="Character.Mag.Dex" DisplayName="DEX" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        MIND
                        <InputNumber @bind-Value="Character.Mag.Mind" DisplayName="MIND" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-6 visually-hidden">
                        Syncro
                    </label>
                    <label class="form-label col col-6 visually-hidden">
                        IQ
                    </label>
                    <label class="form-label col col-6 visually-hidden">
                        PB
                    </label>
                </div>
                <div class="modal-footer">@Character.MagName</div>
            </div>
        </div>
    </div>
}

@code {
    [DisallowNull] private LevelTableModel levelTable = default!;
    [DisallowNull] private ItemPMTModel itemPMT = default!;
    [DisallowNull] private ItemModel[] armors = default!;
    [DisallowNull] private ItemModel[] units = default!;
    [DisallowNull] private ItemModel[] shields = default!;
    [DisallowNull] private ItemModel[] mags = default!;

    [DisallowNull] public CharacterModel Character { get; set; } = default!;
    private int EditUnit { get; set; }
    private UnitModel EditUnitModel => EditUnit switch
    {
        1 => Character.Unit1,
        2 => Character.Unit2,
        3 => Character.Unit3,
        4 => Character.Unit4,
        _ => throw new NotSupportedException()
    };

    [MemberNotNullWhen(false, nameof(levelTable), nameof(itemPMT), nameof(armors), nameof(units), nameof(shields), nameof(mags))]
    private bool IsLoading => levelTable == null || itemPMT == null || armors == null || units == null || shields == null || mags == null;

    protected override async Task OnInitializedAsync()
    {
        levelTable = await levelTableService.GetLevelTableAsync();
        itemPMT = await itemPMTService.GetItemsAsync();
        var items = (await itemsService.GetItemsAsync()).ToArray();
        armors = items.Where(i => i.Identifier.StartsWith("0101")).ToArray();
        shields = items.Where(i => i.Identifier.StartsWith("0102")).ToArray();
        units = items.Where(i => i.Identifier.StartsWith("0103")).ToArray();
        mags = items.Where(i => i.Identifier.StartsWith("02")).ToArray();
        Character = new(levelTable, itemPMT);
        await base.OnInitializedAsync();
    }

    public enum ClassRace
    {
        Humar,
        Hunewearl,
        Hucast,
        Hucaseal,
        Ramar,
        Ramarl,
        Racast,
        Racaseal,
        Fomar,
        Fomarl,
        Fonewm,
        Fonewearl
    }

    public class CharacterModel(LevelTableModel levelTable, ItemPMTModel itemPMT)
    {
        private static readonly int[] maxMats = [250, 150, 150, 150, 250, 250, 150, 150, 250, 250, 150, 150];

        private ClassRace? classRaceSelection;
        private int level = 1;
        private int hpMaterial;
        private int tpMaterial;
        private int powerMaterial;
        private int defMaterial;
        private int mindMaterial;
        private int evadeMaterial;
        private int luckMaterial;
        private int shiftaLevel;
        private int debandLevel;
        private ArmorModel armor = new(itemPMT);
        private UnitModel unit1 = new(itemPMT);
        private UnitModel unit2 = new(itemPMT);
        private UnitModel unit3 = new(itemPMT);
        private UnitModel unit4 = new(itemPMT);
        private ShieldModel shield = new(itemPMT);
        private MagModel mag = MagModel.Parse("Mag 5/0/0/0");

        public ClassRace? ClassRaceSelection
        {
            get { return classRaceSelection; }
            set { classRaceSelection = value; RefreshStats(); }
        }

        public int Level
        {
            get { return level; }
            set
            {
                if (value < 1) value = 1;
                if (value > 200) value = 200;
                level = value; RefreshStats();
            }
        }

        public int HP { get; set; }
        public int TP { get; set; }
        public int ATP { get; set; }
        public int DFP { get; set; }
        public int MST { get; set; }
        public float ATA { get; set; }
        public int EVP { get; set; }
        public int LCK { get; set; }

        public int HPMaterial
        {
            get { return hpMaterial; }
            set
            {
                if (value < 0) value = 0;
                if (value > 125) value = 125;
                hpMaterial = value; RefreshStats();
            }
        }

        public int TPMaterial
        {
            get { return tpMaterial; }
            set
            {
                if (value < 0) value = 0;
                if (value > MaxTPMaterial()) value = MaxTPMaterial();
                tpMaterial = value; RefreshStats();
            }
        }

        public int PowerMaterial
        {
            get { return powerMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxPowerDefEvadeMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
                powerMaterial = value; RefreshStats();
            }
        }

        public int DefMaterial
        {
            get { return defMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxPowerDefEvadeMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + PowerMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
                defMaterial = value; RefreshStats();
            }
        }

        public int MindMaterial
        {
            get { return mindMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxMindMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + PowerMaterial + DefMaterial + EvadeMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
                mindMaterial = value; RefreshStats();
            }
        }

        public int EvadeMaterial
        {
            get { return evadeMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxPowerDefEvadeMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
                evadeMaterial = value; RefreshStats();
            }
        }

        public int LuckMaterial
        {
            get { return luckMaterial; }
            set
            {
                if (value < 0) value = 0;
                if (value > 45) value = 45;
                var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial;
                if (totalMaterial > MaxPowerDefEvadeMaterial()) value -= totalMaterial - MaxPowerDefEvadeMaterial();
                luckMaterial = value; RefreshStats();
            }
        }

        public int ShiftaLevel
        {
            get { return shiftaLevel; }
            set { shiftaLevel = value; RefreshStats(); }
        }

        public int DebandLevel
        {
            get { return debandLevel; }
            set { debandLevel = value; RefreshStats(); }
        }

        public string WeaponName { get; set; } = "";

        public string ArmorName => Armor.ToString();
        public ArmorModel Armor
        {
            get { return armor; }
            set { armor = value; RefreshStats(); }
        }

        public string Unit1Name => Unit1.ToString();
        public UnitModel Unit1
        {
            get { return unit1; }
            set { unit1 = value; RefreshStats(); }
        }

        public string Unit2Name => Unit2.ToString();
        public UnitModel Unit2
        {
            get { return unit2; }
            set { unit2 = value; RefreshStats(); }
        }

        public string Unit3Name => Unit3.ToString();
        public UnitModel Unit3
        {
            get { return unit3; }
            set { unit3 = value; RefreshStats(); }
        }

        public string Unit4Name => Unit4.ToString();
        public UnitModel Unit4
        {
            get { return unit4; }
            set { unit4 = value; RefreshStats(); }
        }

        public string ShieldName => Shield.ToString();
        public ShieldModel Shield
        {
            get { return shield; }
            set { shield = value; RefreshStats(); }
        }

        public string MagName => Mag.ToString();
        public MagModel Mag
        {
            get { return mag; }
            set { mag = value; RefreshStats(); }
        }

        public void RefreshStats()
        {
            if (!ClassRaceSelection.HasValue)
            {
                // Reset values.
                if (Level != 1) Level = 1;
                HP = 0;
                TP = 0;
                ATP = 0;
                DFP = 0;
                MST = 0;
                ATA = 0;
                EVP = 0;
                LCK = 0;
                if (HPMaterial != 0) HPMaterial = 0;
                if (TPMaterial != 0) TPMaterial = 0;
                if (PowerMaterial != 0) PowerMaterial = 0;
                if (DefMaterial != 0) DefMaterial = 0;
                if (MindMaterial != 0) MindMaterial = 0;
                if (EvadeMaterial != 0) EvadeMaterial = 0;
                if (LuckMaterial != 0) LuckMaterial = 0;
                if (ShiftaLevel != 0) ShiftaLevel = 0;
                if (DebandLevel != 0) DebandLevel = 0;
                WeaponName = "";
                if (ArmorName != "") Armor = new(itemPMT);
                if (Unit1Name != "") Unit1 = new(itemPMT);
                if (Unit2Name != "") Unit2 = new(itemPMT);
                if (Unit3Name != "") Unit3 = new(itemPMT);
                if (Unit4Name != "") Unit4 = new(itemPMT);
                if (ShieldName != "") Shield = new(itemPMT);
                if (MagName != "Mag 5/0/0/0") Mag = MagModel.Parse("Mag 5/0/0/0");
                return;
            }

            int indexClass = (int)ClassRaceSelection;

            // Clamp materials numbers that can change with class selection.
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (TPMaterial > MaxTPMaterial()) TPMaterial = MaxTPMaterial();
            if (PowerMaterial > maxMaterial) PowerMaterial = maxMaterial;
            if (DefMaterial > maxMaterial) DefMaterial = maxMaterial;
            if (MindMaterial > MaxMindMaterial()) MindMaterial = MaxMindMaterial();
            if (EvadeMaterial > maxMaterial) EvadeMaterial = maxMaterial;
            if (PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial > maxMaterial)
            {
                PowerMaterial = 0;
                DefMaterial = 0;
                MindMaterial = 0;
                EvadeMaterial = 0;
                LuckMaterial = 0;
            }

            // Reset equipement that don't meet requirements.
            if (Armor.Model != null && !GetItemWithRequirements(Armor.Model).Any()) Armor = new(itemPMT);
            if (Armor.NumberSlots < 1 && Unit1.Model != null) Unit1 = new(itemPMT);
            if (Armor.NumberSlots < 2 && Unit2.Model != null) Unit2 = new(itemPMT);
            if (Armor.NumberSlots < 3 && Unit3.Model != null) Unit3 = new(itemPMT);
            if (Armor.NumberSlots < 4 && Unit4.Model != null) Unit4 = new(itemPMT);
            if (Shield.Model != null && !GetItemWithRequirements(Shield.Model).Any()) Shield = new(itemPMT);

            // Calculate stats.
            var baseStats = levelTable.BaseStats[indexClass];
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            var baseATP = baseStats.ATP + levelDeltas.Sum(l => l.ATP) + GetATPBonus() + (PowerMaterial + Mag.Pow) * 2
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("ATP", s.Item1, s.Item2));
            var baseDFP = baseStats.DFP + levelDeltas.Sum(l => l.DFP) + DefMaterial * 2 + Armor.Dfp + Shield.Dfp
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("DFP", s.Item1, s.Item2)) + Mag.Def;
            var baseMST = baseStats.MST + levelDeltas.Sum(l => l.MST) + (MindMaterial + Mag.Mind) * 2
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("MST", s.Item1, s.Item2));
            HP = (int)Math.Floor((baseStats.HP + levelDeltas.Sum(l => l.HP) + Level - 1) * GetHPMultiplier()) + HPMaterial * 2
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("HP", s.Item1, s.Item2));
            TP = ClassRaceSelection switch
            {
                ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Ramar or ClassRace.Ramarl
                    => baseMST + Level - 1 + GetEveryStatBoost().Sum(s => CalculateStatBoost("TP", s.Item1, s.Item2)),
                ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl
                    => (int)Math.Floor((baseMST + Level - 1) * 1.5 + GetEveryStatBoost().Sum(s => CalculateStatBoost("TP", s.Item1, s.Item2))),
                _ => 0
            } + TPMaterial * 2;
            ATP = (int)Math.Floor(baseATP + baseATP * GetShiftaDebandMultiplier(ShiftaLevel));
            DFP = (int)Math.Floor(baseDFP + baseDFP * GetShiftaDebandMultiplier(DebandLevel));
            MST = baseMST;
            ATA = baseStats.ATA + levelDeltas.Sum(l => l.ATA) / 10f + GetATABonus()
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("ATA", s.Item1, s.Item2)) + Mag.Dex / 2;
            EVP = baseStats.EVP + levelDeltas.Sum(l => l.EVP) + EvadeMaterial * 2 + Armor.Evp + Shield.Evp
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("EVP", s.Item1, s.Item2));
            LCK = baseStats.LCK + levelDeltas.Sum(l => l.LCK) + LuckMaterial * 2
                + GetEveryStatBoost().Sum(s => CalculateStatBoost("LCK", s.Item1, s.Item2));
        }

        private double GetHPMultiplier() => ClassRaceSelection switch
        {
            ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 1.85,
            ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 1.45,
            _ => 2
        };

        private int GetATPBonus() => ClassRaceSelection switch
        {
            ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Hucast or ClassRace.Hucaseal => 10,
            ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 5,
            ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 3,
            _ => 0
        };

        private int GetATABonus() => ClassRaceSelection switch
        {
            ClassRace.Humar or ClassRace.Hunewearl => 38,
            ClassRace.Hucast => 29,
            ClassRace.Hucaseal => 36,
            ClassRace.Ramar => 40,
            ClassRace.Ramarl or ClassRace.Racaseal => 32,
            ClassRace.Racast => 30,
            ClassRace.Fomar or ClassRace.Fomarl => 48,
            ClassRace.Fonewm => 49,
            ClassRace.Fonewearl => 51,
            _ => 0
        };

        public IEnumerable<ItemModel> GetItemWithRequirements(params ItemModel[] items)
        {
            if (!ClassRaceSelection.HasValue) yield break;

            foreach (var (item, armor) in items.Join(itemPMT.Armors, i => i.Identifier, a => a.Key, (i, a) => (item: i, armor: a.Value)))
            {
                bool meetRequirement = armor.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
                meetRequirement &= Level >= armor.RequiredLevel;
                if (meetRequirement) yield return item;
            }

            foreach (var (item, unit) in items.Join(itemPMT.Units, i => i.Identifier, u => u.Key, (i, u) => (item: i, unit: u.Value)))
            {
                yield return item;
            }
        }

        private IEnumerable<Tuple<string, int>> GetEveryStatBoost()
            => Armor.GetStatBoosts().Concat(Unit1.GetStatBoosts().Concat(Unit2.GetStatBoosts().Concat(Unit3.GetStatBoosts().Concat(Unit4.GetStatBoosts().Concat(Shield.GetStatBoosts())))));

        private int CalculateStatBoost(string stat, string statBoost, int amount)
        {
            if (ClassRaceSelection is ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal && stat is "MST" or "TP") return 0;
            if (statBoost == stat || statBoost == $"+{stat}" || statBoost == "+All" && stat != "HP") return amount;
            if (statBoost == $"-{stat}" || statBoost == "-All" && stat != "HP") return -1 * amount;
            return 0;
        }

        private int MaxTPMaterial() => ClassRaceSelection switch
        {
            null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
            _ => 125
        };

        private int MaxPowerDefEvadeMaterial() => ClassRaceSelection.HasValue ? maxMats[(int)ClassRaceSelection] : 0;

        private int MaxMindMaterial() => ClassRaceSelection switch
        {
            null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
            _ => maxMats[(int)ClassRaceSelection]
        };

        private double GetShiftaDebandMultiplier(int shiftaDebandLevel)
            => shiftaDebandLevel == 0 ? 0 : Math.Sign(shiftaDebandLevel) * (1.3 * (Math.Abs(shiftaDebandLevel) - 1) + 10) / 100;
        public TimeSpan GetShiftaDebandDuration(int shiftaDebandLevel)
            => shiftaDebandLevel == 0 ? TimeSpan.Zero : new TimeSpan(0, 0, 10 * (Math.Abs(shiftaDebandLevel) - 1) + 40);
    }

    public class BaseArmorModel(ItemPMTModel itemPMT)
    {
        private int dfpBonus;
        private int evpBonus;

        private ItemModel? model;

        public ItemModel? Model
        {
            get { return model; }
            set
            {
                model = value;
                if (Identifier == null) return;
                var dfpBonusMax = itemPMT.Armors[Identifier].DFPRange;
                if (DfpBonus > dfpBonusMax) DfpBonus = dfpBonusMax;
                var evpBonusMax = itemPMT.Armors[Identifier].EVPRange;
                if (EvpBonus > evpBonusMax) EvpBonus = evpBonusMax;
            }
        }

        public string? Identifier => Model?.Identifier;
        public string Name => Model?.Name ?? "";

        public int Dfp => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Armors[Identifier].DFP + DfpBonus;
        public int DfpBonus
        {
            get { return dfpBonus; }
            set
            {
                if (string.IsNullOrEmpty(Identifier)) return;
                if (value < 0) value = 0;
                var dfpBonusMax = itemPMT.Armors[Identifier].DFPRange;
                if (value > dfpBonusMax) value = dfpBonusMax;
                dfpBonus = value;
            }
        }

        public int Evp => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Armors[Identifier].EVP + EvpBonus;
        public int EvpBonus
        {
            get { return evpBonus; }
            set
            {
                if (string.IsNullOrEmpty(Identifier)) return;
                if (value < 0) value = 0;
                var evpBonusMax = itemPMT.Armors[Identifier].EVPRange;
                if (value > evpBonusMax) value = evpBonusMax;
                evpBonus = value;
            }
        }

        public IEnumerable<Tuple<string, int>> GetStatBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] statNames = ["None", "+ATP", "+ATA", "+EVP", "+DFP", "+MST", "+HP", "+LCK", "+All", "-ATP", "-ATA", "-EVP", "-DFP", "-MST", "-HP", "-LCK", "-All"];
            var statBoost = itemPMT.StatBoosts[itemPMT.Armors[Identifier].StatBoost];
            if (statBoost.Stat1 != 0) yield return Tuple.Create<string, int>(statNames[statBoost.Stat1], statBoost.Amount1);
            if (statBoost.Stat2 != 0) yield return Tuple.Create<string, int>(statNames[statBoost.Stat2], statBoost.Amount2);
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (DfpBonus != 0) s += $" +{DfpBonus}DFP";
            if (EvpBonus != 0) s += $" +{EvpBonus}EVP";
            return s;
        }
    }

    public class ArmorModel(ItemPMTModel itemPMT) : BaseArmorModel(itemPMT)
    {
        private int numberSlots;

        public int NumberSlots
        {
            get { return numberSlots; }
            set
            {
                if (Identifier == null || value < 0) value = 0;
                if (value > 4) value = 4;
                numberSlots = value;
            }
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (NumberSlots != 0) s += $" ({NumberSlots} slot{(NumberSlots > 1 ? "s" : "")})";
            if (DfpBonus != 0) s += $" +{DfpBonus}DFP";
            if (EvpBonus != 0) s += $" +{EvpBonus}EVP";
            return s;
        }
    }

    public class UnitModel(ItemPMTModel itemPMT)
    {
        private int modifier;
        private ItemModel? model;

        public ItemModel? Model
        {
            get { return model; }
            set
            {
                model = value;
                if (Identifier == null) return;
            }
        }

        public string? Identifier => Model?.Identifier;
        public string Name => Model?.Name ?? "";

        public int Modifier
        {
            get { return modifier; }
            set
            {
                if (string.IsNullOrEmpty(Identifier)) return;
                if (value < -2) value = -2;
                if (value > 2) value = 2;
                modifier = value;
            }
        }

        public IEnumerable<Tuple<string, int>> GetStatBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] statNames = ["ATP", "MST", "ATA", "EVP", "HP", "TP", "DFP", "LCK", "All", "EFR", "EIC", "ETH", "ELT", "EDK", "EAll", "ResHP", "ResTP", "ResPB", "Tech", "AtkSpeed", "CureAll", "TrapV", "CurePoison", "CurePara", "CureShock", "CureSlow", "CureConfuse", "CureFreeze", "Unknown28", "Unknown29", "Unknown30", "Unknown31", "Unknown32", "Unknown33", "Unknown34", "Unknown35", "Unknown36", "Unknown37", "Unknown38", "None"];

            switch (statNames[itemPMT.Units[Identifier].Stat])
            {
                case "All":
                    yield return Tuple.Create<string, int>("ATP", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("DFP", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("MST", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("ATA", itemPMT.Units[Identifier].StatAmount / 10);
                    yield return Tuple.Create<string, int>("EVP", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("LCK", itemPMT.Units[Identifier].StatAmount);
                    break;

                case "EAll":
                    yield return Tuple.Create<string, int>("EFR", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("EIC", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("ETH", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("ELT", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("EDK", itemPMT.Units[Identifier].StatAmount);
                    break;

                case "ResHP":
                case "ResTP":
                case "ResPB":
                case "Tech":
                case "AtkSpeed":
                case "CureAll":
                case "TrapV":
                case "CurePoison":
                case "CurePara":
                case "CureShock":
                case "CureSlow":
                case "CureConfuse":
                case "CureFreeze":
                case "None":
                    break;

                default:
                    yield return Tuple.Create<string, int>(statNames[itemPMT.Units[Identifier].Stat], itemPMT.Units[Identifier].StatAmount);
                    break;
            }
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (Modifier > 0) s += new string('+', Modifier);
            if (Modifier < 0) s += new string('-', Modifier * -1);
            return s;
        }
    }

    public class ShieldModel(ItemPMTModel itemPMT) : BaseArmorModel(itemPMT) { }

    public class MagModel
    {
        private int def = 5;
        private int pow;
        private int dex;
        private int mind;

        public string Name { get; set; } = "";
        public int Level => Def + Pow + Dex + Mind;

        public int Def
        {
            get { return def; }
            set
            {
                if (value < 5) value = 5;
                if (value > 200) value = 200;
                var total = value + Pow + Dex + Mind;
                if (total > 200) value -= total - 200;
                def = value;
            }
        }

        public int Pow
        {
            get { return pow; }
            set
            {
                if (value < 0) value = 0;
                if (value > 195) value = 195;
                var total = value + Def + Dex + Mind;
                if (total > 200) value -= total - 200;
                pow = value;
            }
        }

        public int Dex
        {
            get { return dex; }
            set
            {
                if (value < 0) value = 0;
                if (value > 195) value = 195;
                var total = value + Def + Pow + Mind;
                if (total > 200) value -= total - 200;
                dex = value;
            }
        }

        public int Mind
        {
            get { return mind; }
            set
            {
                if (value < 0) value = 0;
                if (value > 195) value = 195;
                var total = value + Def + Pow + Dex;
                if (total > 200) value -= total - 200;
                mind = value;
            }
        }

        public override string ToString() => string.IsNullOrEmpty(Name) ? "" : $"{Name} {Def}/{Pow}/{Dex}/{Mind}";

        public static MagModel Parse(string mag)
        {
            MagModel magModel = new();
            Match m = Regex.Match(mag, @"^(.+?) (\d+?)/(\d+?)/(\d+?)/(\d+?)$", RegexOptions.Singleline);
            if (!m.Success) throw new FormatException();
            magModel.Name = m.Groups[1].Value;
            magModel.Def = int.Parse(m.Groups[2].Value);
            magModel.Pow = int.Parse(m.Groups[3].Value);
            magModel.Dex = int.Parse(m.Groups[4].Value);
            magModel.Mind = int.Parse(m.Groups[5].Value);
            return magModel;
        }
    }
}
