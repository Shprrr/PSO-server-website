@page "/characterBuilder"
@using PSOServerWebsite.Pages.CharacterBuilderModels
@using WeaponModel = PSOServerWebsite.Pages.CharacterBuilderModels.WeaponModel
@using ArmorModel = PSOServerWebsite.Pages.CharacterBuilderModels.ArmorModel
@using ShieldModel = PSOServerWebsite.Pages.CharacterBuilderModels.ShieldModel
@using UnitModel = PSOServerWebsite.Pages.CharacterBuilderModels.UnitModel
@using MagModel = PSOServerWebsite.Pages.CharacterBuilderModels.MagModel
@using PSOServerWebsite.Services
@using System.Text.RegularExpressions
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject LevelTableService levelTableService
@inject ItemsService itemsService
@inject ItemPMTService itemPMTService
@inject RareDropsService rareDropsService
@inject LocationsService locationsService
@inject ConfigService configService

<PageTitle>Character Builder</PageTitle>

<h1>Character Builder</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="alerts"></div>
    <div class="container mb-2">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalCharacterSelection">Change character</button>
    </div>
    <div class="container border rounded">
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Name
                    <InputText @bind-Value="Name" DisplayName="Name" class="form-control"></InputText>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Class
                    <InputSelect @bind-Value="ClassRaceSelection" class="form-select" aria-label="Select a class">
                        <option value="">Select a class ...</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Humar)" value="@ClassRace.Humar">HUmar</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Hunewearl)" value="@ClassRace.Hunewearl">HUnewearl</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Hucast)" value="@ClassRace.Hucast">HUcast</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Hucaseal)" value="@ClassRace.Hucaseal">HUcaseal</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Ramar)" value="@ClassRace.Ramar">RAmar</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Ramarl)" value="@ClassRace.Ramarl">RAmarl</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Racast)" value="@ClassRace.Racast">RAcast</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Racaseal)" value="@ClassRace.Racaseal">RAcaseal</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fomar)" value="@ClassRace.Fomar">FOmar</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fomarl)" value="@ClassRace.Fomarl">FOmarl</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fonewm)" value="@ClassRace.Fonewm">FOnewm</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fonewearl)" value="@ClassRace.Fonewearl">FOnewearl</option>
                    </InputSelect>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Level
                    <InputNumber @bind-Value="Level" DisplayName="Level" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Loadout
                    <InputSelect @bind-Value="LoadoutSelection" class="form-select" aria-label="Select a loadout">
                        @foreach (var loadout in Character.Loadouts)
                        {
                            <option selected="@(LoadoutSelection == loadout.Key)" value="@loadout.Key">@loadout.Key</option>
                        }
                    </InputSelect>
                </label>
                <div class="btn-group btn-group-sm align-top mt-1" role="group" aria-label="Loadout controls">
                    <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#modalLoadoutNew"><span class="bi bi-plus" aria-hidden="true"></span></button>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalLoadoutEdit"><span class="bi bi-pencil" aria-hidden="true"></span></button>
                    <button class="btn btn-danger btn-sm" onclick="confirmDeleteLoadout()"><span class="bi bi-dash" aria-hidden="true"></span></button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    HP
                    <InputNumber @bind-Value="HP" DisplayName="HP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP
                    <InputNumber @bind-Value="TP" DisplayName="TP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATP
                    <InputNumber @bind-Value="ATP" DisplayName="ATP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    DFP
                    <InputNumber @bind-Value="DFP" DisplayName="DFP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    MST
                    <InputNumber @bind-Value="MST" DisplayName="MST" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATA
                    <InputNumber @bind-Value="ATA" DisplayName="ATA" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    EVP
                    <InputNumber @bind-Value="EVP" DisplayName="EVP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    LCK
                    <InputNumber @bind-Value="LCK" DisplayName="LCK" class="form-control" disabled></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    EFR
                    <InputNumber @bind-Value="EFR" DisplayName="EFR" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    EIC
                    <InputNumber @bind-Value="EIC" DisplayName="EIC" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ETH
                    <InputNumber @bind-Value="ETH" DisplayName="ETH" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    EDK
                    <InputNumber @bind-Value="EDK" DisplayName="EDK" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ELT
                    <InputNumber @bind-Value="ELT" DisplayName="ELT" class="form-control" disabled></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col offset-1">
                <label class="form-label">
                    HP Material
                    <InputNumber @bind-Value="HPMaterial" DisplayName="HP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP Material
                    <InputNumber @bind-Value="TPMaterial" DisplayName="TP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Power Material
                    <InputNumber @bind-Value="PowerMaterial" DisplayName="Power Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Def Material
                    <InputNumber @bind-Value="DefMaterial" DisplayName="Def Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mind Material
                    <InputNumber @bind-Value="MindMaterial" DisplayName="Mind Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Evade Material
                    <InputNumber @bind-Value="EvadeMaterial" DisplayName="Evade Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Luck Material
                    <InputNumber @bind-Value="LuckMaterial" DisplayName="Luck Material" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row small">
            <div class="col-1">
                Target
                <span>@TargetMaterialTotal</span>/<span>@MaxTargetMaterialTotal</span>
                <div class="form-check form-switch small">
                    <InputCheckbox id="checkTargetEditMode" @bind-Value="TargetEditMode" DisplayName="Edit mode" class="form-check-input"></InputCheckbox>
                    <label class="form-check-label" for="checkTargetEditMode">Edit mode</label>
                </div>
            </div>
            <div class="col">
                <label class="form-label">
                    HP Material
                    <input type="number" class="form-control form-control-sm" value="125" disabled />
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP Material
                    <input type="number" class="form-control form-control-sm" value="@MaxTPMaterial()" disabled />
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Power Material
                    <InputNumber @bind-Value="TargetPowerMaterial" DisplayName="Target Power Material" class="form-control form-control-sm" disabled="@(!TargetEditMode)"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Def Material
                    <InputNumber @bind-Value="TargetDefMaterial" DisplayName="Target Def Material" class="form-control form-control-sm" disabled="@(!TargetEditMode)"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mind Material
                    <InputNumber @bind-Value="TargetMindMaterial" DisplayName="Target Mind Material" class="form-control form-control-sm" disabled="@(!TargetEditMode)"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Evade Material
                    <InputNumber @bind-Value="TargetEvadeMaterial" DisplayName="Target Evade Material" class="form-control form-control-sm" disabled="@(!TargetEditMode)"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Luck Material
                    <InputNumber @bind-Value="TargetLuckMaterial" DisplayName="Target Luck Material" class="form-control form-control-sm" disabled="@(!TargetEditMode)"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Weapon
                    <span class="form-control-plaintext form-text">@Character.WeaponName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditWeapon">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Armor
                    <span class="form-control-plaintext form-text">@Character.ArmorName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditArmor">Edit</button>
                </label>
            </div>
            @if (Armor.NumberSlots > 0)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 1
                        <span class="form-control-plaintext form-text">@Character.Unit1Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 1)">Edit</button>
                    </label>
                </div>
            }
            @if (Armor.NumberSlots > 1)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 2
                        <span class="form-control-plaintext form-text">@Character.Unit2Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 2)">Edit</button>
                    </label>
                </div>
            }
            @if (Armor.NumberSlots > 2)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 3
                        <span class="form-control-plaintext form-text">@Character.Unit3Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 3)">Edit</button>
                    </label>
                </div>
            }
            @if (Armor.NumberSlots > 3)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 4
                        <span class="form-control-plaintext form-text">@Character.Unit4Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 4)">Edit</button>
                    </label>
                </div>
            }
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Shield
                    <span class="form-control-plaintext form-text">@Character.ShieldName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditShield">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Mag
                    <span class="form-control-plaintext form-text">@Character.MagName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditMag">Edit</button>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Shifta Level
                    <InputNumber @bind-Value="ShiftaLevel" DisplayName="Shifta Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@GetShiftaDebandDuration(ShiftaLevel)</span>
            </div>
            <div class="col">
                <label class="form-label">
                    Deband Level
                    <InputNumber @bind-Value="DebandLevel" DisplayName="Deband Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@GetShiftaDebandDuration(DebandLevel)</span>
            </div>
        </div>
        @if (GetEveryTechBoost().Any())
        {
            <div class="row">
                <div class="col-2">
                    Technique Boosts
                </div>
                @foreach (var techBoost in GetEveryTechBoost())
                {
                    <div class="col-2">
                        <label class="form-label">
                            @techBoost.Name
                            <span class="input-group">
                                @if (techBoost.Name == "Megid")
                                {
                                    <InputText Value="@techBoost.Suffix" ValueExpression="@(() => techBoost.Suffix)" DisplayName="@techBoost.Name" class="form-control" disabled></InputText>
                                }
                                else
                                {
                                    <InputNumber Value="@techBoost.Value" ValueExpression="@(() => techBoost.Value)" DisplayName="@techBoost.Name" class="form-control" disabled></InputNumber>
                                    @if (techBoost.Suffix != null)
                                    {
                                        <span class="input-group-append input-group-text">@techBoost.Suffix</span>
                                    }
                                }
                            </span>
                        </label>
                    </div>
                }
            </div>
        }
        @if (GetEverySpecialStats().Any())
        {
            <div class="row">
                <div class="col-2">
                    Hidden Stats
                </div>
                @foreach (var specialStat in GetEverySpecialStats())
                {
                    <div class="col-2">
                        <label class="form-label">
                            @specialStat.Name
                            <span class="input-group">
                                @if (specialStat.Prefix != null)
                                {
                                    <span class="input-group-prepend input-group-text">@specialStat.Prefix</span>
                                }
                                @if (specialStat.Value != 0)
                                {
                                    <InputNumber Value="@specialStat.Value" ValueExpression="@(() => specialStat.Value)" DisplayName="@specialStat.Name" class="form-control" disabled></InputNumber>
                                }
                                @if (specialStat.Suffix != null)
                                {
                                    <span class="input-group-append input-group-text">@specialStat.Suffix</span>
                                }
                            </span>
                        </label>
                    </div>
                }
            </div>
        }
        <div class="row">
            <div class="col">
                <label class="form-label w-100">
                    Notes
                    <textarea id="textAreaNotes" class="form-control" @bind="Notes"></textarea>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label w-100">Wishlist</label>
                <div class="btn-group-vertical vstack" role="group">
                    @foreach (var wishItem in Character.Wishlist)
                    {
                        <button type="button" class="btn btn-outline-primary d-flex" @onclick="@(()=> modals!.ShowEditWishlist(wishItem))">
                            <ItemName ItemIdentifier="@GetItemByName(wishItem)?.Identifier" />
                            <div class="btn btn-sm btn-danger ms-auto" @onclick="@(()=> modals!.ShowDeleteWishlist(wishItem))" @onclick:stopPropagation="true">Delete</div>
                        </button>
                    }

                    <button type="button" class="btn btn-outline-secondary d-flex" data-bs-toggle="modal" data-bs-target="#modalWishlistNew">
                        ~ Add to Wishlist ~
                    </button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label w-100">Where to find</label>
                <table class="table table-striped table-hover table-sm">
                    <tbody>
                        @foreach (var location in GetItemLocations())
                        {
                            <tr>
                                <th><ItemName ItemIdentifier="@location.ItemId" /></th>
                                <td>@location.DifficultyName</td>
                                <td class="text-nowrap">@location.EpisodeName</td>
                                <td>@GetLocationName(location.Location, location.EpisodeName, location.DifficultyName)</td>
                                <td><SectionId Value="@location.SectionId" /></td>
                                <td><Probability ProbabilityRatio="@location.Probability" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        const textAreaNotes = document.getElementById('textAreaNotes');
        textAreaNotes.addEventListener('input', adjustNotesSize);
        function adjustNotesSize() {
        textAreaNotes.style.height = 'auto';
        textAreaNotes.style.height = `${textAreaNotes.scrollHeight}px`;
        }
    </script>

    <CharacterBuilder_Modals @ref="modals" Parent="this" EditUnitIndex="EditUnit" ItemPMT="itemPMT" Weapons="weapons" Armors="armors" Shields="shields" Units="units" Mags="mags" OnClose="() => { RefreshStats(); StateHasChanged(); }" />
}

@code {
    private CharacterBuilder_Modals? modals;

    [DisallowNull] private LevelTableModel levelTable = default!;
    [DisallowNull] private ItemPMTModel itemPMT = default!;
    [DisallowNull] private ItemModel[] weapons = default!;
    [DisallowNull] private ItemModel[] armors = default!;
    [DisallowNull] private ItemModel[] units = default!;
    [DisallowNull] private ItemModel[] shields = default!;
    [DisallowNull] private ItemModel[] mags = default!;
    [DisallowNull] private Dictionary<string, ItemRareDropLocation[]> rareDropsByItem = default!;
    [DisallowNull] private LocationModel[] locations = default!;
    [DisallowNull] private ConfigModel config = default!;
    [DisallowNull] private Dictionary<string, ItemRareDropLocation[]> questF95EByItem = default!;

    [DisallowNull] public List<CharacterModel> Characters { get; set; } = new();
    [DisallowNull] public CharacterModel Character { get; set; } = default!;
    private int EditUnit { get; set; }

    [MemberNotNullWhen(false, nameof(levelTable), nameof(itemPMT), nameof(weapons), nameof(armors), nameof(units), nameof(shields), nameof(mags), nameof(config), nameof(rareDropsByItem), nameof(locations))]
    private bool IsLoading => levelTable == null || itemPMT == null || weapons == null || armors == null || units == null || shields == null || mags == null || config == null || rareDropsByItem == null || locations == null;

    protected override async Task OnInitializedAsync()
    {
        levelTable = await levelTableService.GetLevelTableAsync();
        itemPMT = await itemPMTService.GetItemsAsync();
        var items = (await itemsService.GetItemsAsync()).ToArray();
        weapons = items.Where(i => i.Identifier.StartsWith("00")).ToArray();
        armors = items.Where(i => i.Identifier.StartsWith("0101")).ToArray();
        shields = items.Where(i => i.Identifier.StartsWith("0102")).ToArray();
        units = items.Where(i => i.Identifier.StartsWith("0103")).ToArray();
        mags = items.Where(i => i.Identifier.StartsWith("02")).ToArray();
        weapon = new(itemPMT);
        armor = new(itemPMT);
        unit1 = new(itemPMT);
        unit2 = new(itemPMT);
        unit3 = new(itemPMT);
        unit4 = new(itemPMT);
        shield = new(itemPMT);

        config = await configService.GetConfigAsync();

        var rareDrops = await rareDropsService.GetRareDropsAsync();
        rareDropsByItem = rareDrops.Normal.Episodes().SelectMany(e => e.Value.Difficulties(), (episode, difficulty) => (episode, difficulty))
            .SelectMany(d => d.difficulty.Value.SectionsId(), (ed, sectionId) => (ed.episode, ed.difficulty, sectionId))
            .SelectMany(d => d.sectionId.Value, (eds, rare) => (eds.episode, eds.difficulty, eds.sectionId, location: rare.Key, rareSpecification: rare.Value))
            .SelectMany(d => d.rareSpecification, (edsr, spec) => (spec.ItemDescription, new ItemRareDropLocation(spec.ItemDescription.Replace("0x", ""), edsr.episode, edsr.difficulty, edsr.sectionId, edsr.location, config.ApplyDropRateMultiplier(spec.Probability))))
            .GroupBy(d => d.ItemDescription).ToDictionary(d => d.Key, d => d.Select(d => d.Item2).ToArray());

        locations = (await locationsService.GetLocationsAsync()).ToArray();
        questF95EByItem = config.ConvertQuestF95EResultItems().Types()
            .SelectMany(t => t.Value.Difficulties(), (type, difficulties) => (type, difficulties))
            .SelectMany(q => q.difficulties.Value, (q, item) =>
            {
                var chances = 1;
                if (q.type.Name.StartsWith("Black Paper's Dangerous Deal 1"))
                    chances = q.difficulties.Name switch
                    {
                        "Hard" => 2,
                        "Very Hard" => 3,
                        "Ultimate" => 4,
                        _ => 1
                    };
                if (q.type.Name == "Black Paper's Dangerous Deal 2" && (q.difficulties.Name == "Very Hard" || q.difficulties.Name == "Ultimate"))
                    chances = 2;
                ItemRareDropLocation itemRareDropLocation = new ItemRareDropLocation(item, "Episode 4", q.difficulties.Name, "", q.type.Name, $"{chances}/{q.difficulties.Value.Length}");
                return (ItemDescription: item, itemRareDropLocation);
            })
            .GroupBy(q => q.ItemDescription).ToDictionary(q => q.Key, d => d.Select(d => d.Item2).ToArray());

        var characterSelectedIndex = await localStorage.GetItemAsync<int>("characterSelectedIndex");
        Characters = await localStorage.GetItemAsync<List<CharacterModel>>("characters") ?? new();
        if (characterSelectedIndex >= Characters.Count) characterSelectedIndex = 0;
        if (Characters.Count > 0)
        {
            LoadCharacter(Characters[characterSelectedIndex]);
        }
        else
        {
            Character = new();
            Characters.Add(Character);
        }

        await base.OnInitializedAsync();
    }

    public void RefreshComponent()
    {
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
            await JsRuntime.InvokeVoidAsync("adjustNotesSize");
    }

    public void LoadCharacter(CharacterModel character)
    {
        Character = character;
        localStorage.SetItemAsync("characterSelectedIndex", Characters.IndexOf(character));
        RefreshEquipmentModels();
        StateHasChanged();
    }

    private static readonly int[] maxMats = [250, 150, 150, 150, 250, 250, 150, 150, 250, 250, 150, 150];

    [DisallowNull] private WeaponModel weapon = default!;
    [DisallowNull] private ArmorModel armor = default!;
    [DisallowNull] private UnitModel unit1 = default!;
    [DisallowNull] private UnitModel unit2 = default!;
    [DisallowNull] private UnitModel unit3 = default!;
    [DisallowNull] private UnitModel unit4 = default!;
    [DisallowNull] private ShieldModel shield = default!;
    [DisallowNull] private MagModel mag = default!;

    public string Name
    {
        get { return Character.Name; }
        set { Character.Name = value; RefreshStats(); }
    }

    public ClassRace? ClassRaceSelection
    {
        get { return Character.ClassRaceSelection; }
        set { Character.ClassRaceSelection = value; RefreshStats(); }
    }

    public string LoadoutSelection
    {
        get { return Character.LoadoutSelection; }
        set { Character.LoadoutSelection = value; RefreshEquipmentModels(); }
    }

    public int Level
    {
        get { return Character.Level; }
        set
        {
            if (value < 1) value = 1;
            if (value > 200) value = 200;
            Character.Level = value; RefreshStats();
        }
    }

    public int HP { get; set; }
    public int TP { get; set; }
    public int BaseATP
    {
        get
        {
            if (!ClassRaceSelection.HasValue) return 0;
            int indexClass = (int)ClassRaceSelection;
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            return levelTable.BaseStats[indexClass].ATP + levelDeltas.Sum(l => l.ATP) + GetATPBonus() + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("ATP", s.Code, s.Value)) + (PowerMaterial + Mag.Pow) * 2;
        }
    }
    public int ATP { get; set; }
    public int DFP { get; set; }
    public int BaseMST
    {
        get
        {
            if (!ClassRaceSelection.HasValue) return 0;
            int indexClass = (int)ClassRaceSelection;
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            return levelTable.BaseStats[indexClass].MST + levelDeltas.Sum(l => l.MST) + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("MST", s.Code, s.Value)) + (MindMaterial + Mag.Mind) * 2;
        }
    }
    public int MST { get; set; }
    public float BaseATA
    {
        get
        {
            if (!ClassRaceSelection.HasValue) return 0;
            int indexClass = (int)ClassRaceSelection;
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            return levelTable.BaseStats[indexClass].ATA + levelDeltas.Sum(l => l.ATA) / 10f + GetATABonus() + GetEveryStatBoost().Sum(s => (float)CalculateStatBoost("ATA", s.Code, s.Value)) + Mag.Dex / 2f;
        }
    }
    public float ATA { get; set; }
    public int EVP { get; set; }
    public int LCK { get; set; }
    public int EFR { get; set; }
    public int EIC { get; set; }
    public int ETH { get; set; }
    public int EDK { get; set; }
    public int ELT { get; set; }

    public int HPMaterial
    {
        get { return Character.HPMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > 125) value = 125;
            Character.HPMaterial = value; RefreshStats();
        }
    }

    public int TPMaterial
    {
        get { return Character.TPMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > MaxTPMaterial()) value = MaxTPMaterial();
            Character.TPMaterial = value; RefreshStats();
        }
    }

    public int PowerMaterial
    {
        get { return Character.PowerMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.PowerMaterial = value; RefreshStats();
        }
    }

    public int DefMaterial
    {
        get { return Character.DefMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + PowerMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.DefMaterial = value; RefreshStats();
        }
    }

    public int MindMaterial
    {
        get { return Character.MindMaterial; }
        set
        {
            var maxMaterial = MaxMindMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + PowerMaterial + DefMaterial + EvadeMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            if (value < 0) value = 0;
            Character.MindMaterial = value; RefreshStats();
        }
    }

    public int EvadeMaterial
    {
        get { return Character.EvadeMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.EvadeMaterial = value; RefreshStats();
        }
    }

    public int LuckMaterial
    {
        get { return Character.LuckMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > 45) value = 45;
            var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial;
            if (totalMaterial > MaxPowerDefEvadeMaterial()) value -= totalMaterial - MaxPowerDefEvadeMaterial();
            Character.LuckMaterial = value; RefreshStats();
        }
    }

    public int TargetPowerMaterial
    {
        get { return Character.TargetPowerMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.TargetPowerMaterial = value; RefreshStats();
        }
    }

    public int TargetDefMaterial
    {
        get { return Character.TargetDefMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetPowerMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.TargetDefMaterial = value; RefreshStats();
        }
    }

    public int TargetMindMaterial
    {
        get { return Character.TargetMindMaterial; }
        set
        {
            var maxMaterial = MaxMindMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetPowerMaterial + TargetDefMaterial + TargetEvadeMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            if (value < 0) value = 0;
            Character.TargetMindMaterial = value; RefreshStats();
        }
    }

    public int TargetEvadeMaterial
    {
        get { return Character.TargetEvadeMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.TargetEvadeMaterial = value; RefreshStats();
        }
    }

    public int TargetLuckMaterial
    {
        get { return Character.TargetLuckMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > 45) value = 45;
            var totalMaterial = value + TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial;
            if (totalMaterial > MaxPowerDefEvadeMaterial()) value -= totalMaterial - MaxPowerDefEvadeMaterial();
            Character.TargetLuckMaterial = value; RefreshStats();
        }
    }

    public bool TargetEditMode { get; set; }
    public int TargetMaterialTotal => 125 + MaxTPMaterial() + TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial;

    public int MaxTargetMaterialTotal => 125 + MaxTPMaterial() + MaxPowerDefEvadeMaterial();

    public int ShiftaLevel
    {
        get { return Character.ShiftaLevel; }
        set { Character.ShiftaLevel = value; RefreshStats(); }
    }

    public int DebandLevel
    {
        get { return Character.DebandLevel; }
        set { Character.DebandLevel = value; RefreshStats(); }
    }

    public WeaponModel Weapon
    {
        get { return weapon; }
        set { weapon = value; RefreshStats(); }
    }

    public ArmorModel Armor
    {
        get { return armor; }
        set { armor = value; RefreshStats(); }
    }

    public UnitModel Unit1
    {
        get { return unit1; }
        set { unit1 = value; RefreshStats(); }
    }

    public UnitModel Unit2
    {
        get { return unit2; }
        set { unit2 = value; RefreshStats(); }
    }

    public UnitModel Unit3
    {
        get { return unit3; }
        set { unit3 = value; RefreshStats(); }
    }

    public UnitModel Unit4
    {
        get { return unit4; }
        set { unit4 = value; RefreshStats(); }
    }

    public ShieldModel Shield
    {
        get { return shield; }
        set { shield = value; RefreshStats(); }
    }

    public MagModel Mag
    {
        get { return mag; }
        set { mag = value; RefreshStats(); }
    }

    public string? Notes
    {
        get { return Character.Notes; }
        set { Character.Notes = value; RefreshStats(); }
    }

    public void RefreshEquipmentModels()
    {
        // Keep equipment names because they will be erased when assigning the new loadout.
        string weaponName = Character.WeaponName;
        string armorName = Character.ArmorName;
        string unit1Name = Character.Unit1Name;
        string unit2Name = Character.Unit2Name;
        string unit3Name = Character.Unit3Name;
        string unit4Name = Character.Unit4Name;
        string shieldName = Character.ShieldName;
        string magName = Character.MagName;
        // It's this order because each one helps with requirements for other equipment.
        Mag = MagModel.Parse(mags, magName);
        Armor = ArmorModel.Parse(itemPMT, armors, armorName);
        Unit1 = UnitModel.Parse(itemPMT, units, unit1Name);
        Unit2 = UnitModel.Parse(itemPMT, units, unit2Name);
        Unit3 = UnitModel.Parse(itemPMT, units, unit3Name);
        Unit4 = UnitModel.Parse(itemPMT, units, unit4Name);
        Shield = ShieldModel.Parse(itemPMT, shields, shieldName);
        Weapon = WeaponModel.Parse(itemPMT, weapons, weaponName);
    }

    public void RefreshStats()
    {
        if (!ClassRaceSelection.HasValue)
        {
            // Reset values.
            if (Level != 1) Character.Level = 1;
            HP = 0;
            TP = 0;
            ATP = 0;
            DFP = 0;
            MST = 0;
            ATA = 0;
            EVP = 0;
            LCK = 0;
            EFR = 0;
            EIC = 0;
            ETH = 0;
            EDK = 0;
            ELT = 0;
            if (HPMaterial != 0) Character.HPMaterial = 0;
            if (TPMaterial != 0) Character.TPMaterial = 0;
            if (PowerMaterial != 0) Character.PowerMaterial = 0;
            if (DefMaterial != 0) Character.DefMaterial = 0;
            if (MindMaterial != 0) Character.MindMaterial = 0;
            if (EvadeMaterial != 0) Character.EvadeMaterial = 0;
            if (LuckMaterial != 0) Character.LuckMaterial = 0;
            if (TargetPowerMaterial != 0) Character.TargetPowerMaterial = 0;
            if (TargetDefMaterial != 0) Character.TargetDefMaterial = 0;
            if (TargetMindMaterial != 0) Character.TargetMindMaterial = 0;
            if (TargetEvadeMaterial != 0) Character.TargetEvadeMaterial = 0;
            if (TargetLuckMaterial != 0) Character.TargetLuckMaterial = 0;
            if (ShiftaLevel != 0) Character.ShiftaLevel = 0;
            if (DebandLevel != 0) Character.DebandLevel = 0;
            if (Character.WeaponName != "") { Character.WeaponName = ""; Weapon = new(itemPMT); }
            if (Character.ArmorName != "") { Character.ArmorName = ""; Armor = new(itemPMT); }
            if (Character.Unit1Name != "") { Character.Unit1Name = ""; Unit1 = new(itemPMT); }
            if (Character.Unit2Name != "") { Character.Unit2Name = ""; Unit2 = new(itemPMT); }
            if (Character.Unit3Name != "") { Character.Unit3Name = ""; Unit3 = new(itemPMT); }
            if (Character.Unit4Name != "") { Character.Unit4Name = ""; Unit4 = new(itemPMT); }
            if (Character.ShieldName != "") { Character.ShieldName = ""; Shield = new(itemPMT); }
            if (Character.MagName != "Mag 5/0/0/0") { Character.MagName = "Mag 5/0/0/0"; Mag = MagModel.Parse(mags, "Mag 5/0/0/0"); }

            localStorage.SetItemAsync("characters", Characters);
            return;
        }

        int indexClass = (int)ClassRaceSelection;

        // Clamp materials numbers that can change with class selection.
        var maxMaterial = MaxPowerDefEvadeMaterial();
        if (TPMaterial > MaxTPMaterial()) TPMaterial = MaxTPMaterial();
        if (PowerMaterial > maxMaterial) PowerMaterial = maxMaterial;
        if (DefMaterial > maxMaterial) DefMaterial = maxMaterial;
        if (MindMaterial > MaxMindMaterial()) MindMaterial = MaxMindMaterial();
        if (EvadeMaterial > maxMaterial) EvadeMaterial = maxMaterial;
        if (PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial > maxMaterial)
        {
            PowerMaterial = 0;
            DefMaterial = 0;
            MindMaterial = 0;
            EvadeMaterial = 0;
            LuckMaterial = 0;
        }
        if (TargetPowerMaterial > maxMaterial) TargetPowerMaterial = maxMaterial;
        if (TargetDefMaterial > maxMaterial) TargetDefMaterial = maxMaterial;
        if (TargetMindMaterial > MaxMindMaterial()) TargetMindMaterial = MaxMindMaterial();
        if (TargetEvadeMaterial > maxMaterial) TargetEvadeMaterial = maxMaterial;
        if (TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial > maxMaterial)
        {
            TargetPowerMaterial = 0;
            TargetDefMaterial = 0;
            TargetMindMaterial = 0;
            TargetEvadeMaterial = 0;
            TargetLuckMaterial = 0;
        }

        // Set equipment names.
        if (Character.WeaponName != Weapon.ToString()) Character.WeaponName = Weapon.ToString();
        if (Character.ArmorName != Armor.ToString()) Character.ArmorName = Armor.ToString();
        if (Character.Unit1Name != Unit1.ToString()) Character.Unit1Name = Unit1.ToString();
        if (Character.Unit2Name != Unit2.ToString()) Character.Unit2Name = Unit2.ToString();
        if (Character.Unit3Name != Unit3.ToString()) Character.Unit3Name = Unit3.ToString();
        if (Character.Unit4Name != Unit4.ToString()) Character.Unit4Name = Unit4.ToString();
        if (Character.ShieldName != Shield.ToString()) Character.ShieldName = Shield.ToString();
        if (Character.MagName != Mag.ToString()) Character.MagName = Mag.ToString();

        // Reset equipment that don't meet requirements.
        if (Weapon.Model != null && !GetItemWithRequirements(Weapon.Model).Any()) Weapon = new(itemPMT);
        if (Armor.Model != null && !GetItemWithRequirements(Armor.Model).Any()) Armor = new(itemPMT);
        if (Unit1.Model != null && (Armor.NumberSlots < 1 || !GetItemWithRequirements(Unit1.Model).Any())) Unit1 = new(itemPMT);
        if (Unit2.Model != null && (Armor.NumberSlots < 2 || !GetItemWithRequirements(Unit2.Model).Any())) Unit2 = new(itemPMT);
        if (Unit3.Model != null && (Armor.NumberSlots < 3 || !GetItemWithRequirements(Unit3.Model).Any())) Unit3 = new(itemPMT);
        if (Unit4.Model != null && (Armor.NumberSlots < 4 || !GetItemWithRequirements(Unit4.Model).Any())) Unit4 = new(itemPMT);
        if (Shield.Model != null && !GetItemWithRequirements(Shield.Model).Any()) Shield = new(itemPMT);

        // Calculate stats.
        var baseStats = levelTable.BaseStats[indexClass];
        var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
        var baseATP = BaseATP + Weapon.BaseAtp;
        var baseDFP = baseStats.DFP + levelDeltas.Sum(l => l.DFP) + DefMaterial * 2 + Armor.Dfp + Shield.Dfp
            + GetEveryStatBoost().Sum(s => CalculateStatBoost("DFP", s.Code, s.Value)) + Mag.Def;
        var baseMST = BaseMST + Weapon.Mst;
        HP = (int)Math.Floor((baseStats.HP + levelDeltas.Sum(l => l.HP) + Level - 1) * GetHPMultiplier()) + HPMaterial * 2
            + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("HP", s.Code, s.Value));
        TP = ClassRaceSelection switch
        {
            ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Ramar or ClassRace.Ramarl
                => baseMST + Level - 1 + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("TP", s.Code, s.Value)),
            ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl
                => (int)Math.Floor((baseMST + Level - 1) * 1.5 + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("TP", s.Code, s.Value))),
            _ => 0
        } + TPMaterial * 2;
        ATP = (int)Math.Floor(baseATP + baseATP * GetShiftaDebandMultiplier(ShiftaLevel)) + Weapon.Atp - Weapon.BaseAtp;
        DFP = (int)Math.Floor(baseDFP + baseDFP * GetShiftaDebandMultiplier(DebandLevel));
        MST = baseMST;
        ATA = BaseATA + Weapon.Ata;
        EVP = baseStats.EVP + levelDeltas.Sum(l => l.EVP) + EvadeMaterial * 2 + Armor.Evp + Shield.Evp
            + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("EVP", s.Code, s.Value));
        LCK = baseStats.LCK + levelDeltas.Sum(l => l.LCK) + LuckMaterial * 2
            + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("LCK", s.Code, s.Value));
        EFR = Armor.Efr + Shield.Efr + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("EFR", s.Code, s.Value));
        EIC = Armor.Eic + Shield.Eic + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("EIC", s.Code, s.Value));
        ETH = Armor.Eth + Shield.Eth + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("ETH", s.Code, s.Value));
        EDK = Armor.Edk + Shield.Edk + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("EDK", s.Code, s.Value));
        ELT = Armor.Elt + Shield.Elt + GetEveryStatBoost().Sum(s => (int)CalculateStatBoost("ELT", s.Code, s.Value));

        localStorage.SetItemAsync("characters", Characters);
    }

    private double GetHPMultiplier() => ClassRaceSelection switch
    {
        ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 1.85,
        ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 1.45,
        _ => 2
    };

    private int GetATPBonus() => ClassRaceSelection switch
    {
        ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Hucast or ClassRace.Hucaseal => 10,
        ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 5,
        ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 3,
        _ => 0
    };

    private int GetATABonus() => ClassRaceSelection switch
    {
        ClassRace.Humar or ClassRace.Hunewearl => 38,
        ClassRace.Hucast => 29,
        ClassRace.Hucaseal => 36,
        ClassRace.Ramar => 40,
        ClassRace.Ramarl or ClassRace.Racaseal => 32,
        ClassRace.Racast => 30,
        ClassRace.Fomar or ClassRace.Fomarl => 48,
        ClassRace.Fonewm => 49,
        ClassRace.Fonewearl => 51,
        _ => 0
    };

    public IEnumerable<ItemModel> GetItemWithRequirements(params ItemModel[] items)
    {
        if (!ClassRaceSelection.HasValue) yield break;

        foreach (var (item, weapon) in items.Join(itemPMT.Weapons, i => i.Identifier, w => w.Key, (i, w) => (item: i, weapon: w.Value)))
        {
            bool meetRequirement = weapon.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
            meetRequirement &= BaseATP >= weapon.ATPRequired;
            meetRequirement &= BaseATA >= weapon.ATARequired;
            meetRequirement &= BaseMST >= weapon.MSTRequired;
            if (meetRequirement) yield return item;
        }

        foreach (var (item, armor) in items.Join(itemPMT.Armors, i => i.Identifier, a => a.Key, (i, a) => (item: i, armor: a.Value)))
        {
            bool meetRequirement = armor.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
            meetRequirement &= Level > armor.RequiredLevel;
            if (meetRequirement) yield return item;
        }

        foreach (var (item, unit) in items.Join(itemPMT.Units, i => i.Identifier, u => u.Key, (i, u) => (item: i, unit: u.Value)))
        {
            bool meetRequirement = unit.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
            if (meetRequirement) yield return item;
        }
    }

    private IEnumerable<Stat> GetEveryStatBoost()
        => Weapon.GetStatBoosts().Concat(Armor.GetStatBoosts().Concat(Unit1.GetStatBoosts().Concat(Unit2.GetStatBoosts().Concat(Unit3.GetStatBoosts().Concat(Unit4.GetStatBoosts().Concat(Shield.GetStatBoosts()))))));

    private double CalculateStatBoost(string stat, string statBoost, double amount)
    {
        if (ClassRaceSelection is ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal && stat is "MST" or "TP") return 0;
        if (statBoost == stat || statBoost == $"+{stat}" || statBoost == "+All" && stat != "HP") return amount;
        if (statBoost == $"-{stat}" || statBoost == "-All" && stat != "HP") return -1 * amount;
        return 0;
    }

    private int MaxTPMaterial() => ClassRaceSelection switch
    {
        null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
        _ => 125
    };

    private int MaxPowerDefEvadeMaterial() => ClassRaceSelection.HasValue ? maxMats[(int)ClassRaceSelection] : 0;

    private int MaxMindMaterial() => ClassRaceSelection switch
    {
        null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
        _ => maxMats[(int)ClassRaceSelection]
    };

    private double GetShiftaDebandMultiplier(int shiftaDebandLevel)
        => shiftaDebandLevel == 0 ? 0 : Math.Sign(shiftaDebandLevel) * (1.3 * (Math.Abs(shiftaDebandLevel) - 1) + 10) / 100;
    private TimeSpan GetShiftaDebandDuration(int shiftaDebandLevel)
        => shiftaDebandLevel == 0 ? TimeSpan.Zero : new TimeSpan(0, 0, 10 * (Math.Abs(shiftaDebandLevel) - 1) + 40);

    private IEnumerable<Tech> GetClassTechBoost()
    {
        switch (ClassRaceSelection)
        {
            case ClassRace.Fomar:
                yield return new Tech("Gifoie", 30);
                yield return new Tech("Gibarta", 30);
                yield return new Tech("Gizonde", 30);
                yield return new Tech("Grants", 30);
                yield return new Tech("Shifta", 100);
                yield return new Tech("Deband", 100);
                break;

            case ClassRace.Fomarl:
                yield return new Tech("Grants", 50);
                yield return new Tech("Resta", 100);
                yield return new Tech("Anti", 100);
                yield return new Tech("Shifta", 100);
                yield return new Tech("Deband", 100);
                break;

            case ClassRace.Fonewm:
                yield return new Tech("Gifoie", 30);
                yield return new Tech("Gibarta", 30);
                yield return new Tech("Gizonde", 30);
                yield return new Tech("Rafoie", 30);
                yield return new Tech("Rabarta", 30);
                yield return new Tech("Razonde", 30);
                break;

            case ClassRace.Fonewearl:
                yield return new Tech("Foie", 30);
                yield return new Tech("Barta", 30);
                yield return new Tech("Zonde", 30);
                yield return new Tech("Megid", 100);
                yield return new Tech("Resta", 100);
                yield return new Tech("Anti", 100);
                break;

            default:
                yield break;
        }
    }
    private IEnumerable<Tech> GetEveryTechBoost() => GetClassTechBoost().Concat(Weapon.GetTechBoosts().Concat(Armor.GetTechBoosts().Concat(Shield.GetTechBoosts())))
        .GroupBy(t => t.Name, (name, boosts) => new Tech(name, boosts.Sum(t => t.Value)))
        .Order();

    private IEnumerable<Stat> GetClassStatBoost()
    {
        switch (ClassRaceSelection)
        {
            case ClassRace.Ramar:
            case ClassRace.Ramarl:
            case ClassRace.Racast:
            case ClassRace.Racaseal:
                yield return new Stat("Ranger", 0);
                break;

            default:
                yield break;
        }
    }
    private IEnumerable<Stat> GetEverySpecialStats() => GetClassStatBoost().Concat(GetEveryStatBoost())
        .Where(s => !new string[] { "ATP", "MST", "ATA", "EVP", "HP", "TP", "DFP", "LCK", "EFR", "EIC", "ETH", "ELT", "EDK", "+ATP", "+ATA", "+EVP", "+DFP", "+MST", "+HP", "+LCK", "+All", "-ATP", "-ATA", "-EVP", "-DFP", "-MST", "-HP", "-LCK", "-All" }.Contains(s.Code));

    public ItemModel? GetItemByName(string name)
    {
        return weapons.Concat(armors.Concat(shields.Concat(units.Concat(mags)))).FirstOrDefault(i => i.Name == name);
    }

    private IEnumerable<ItemRareDropLocation> GetItemLocations()
    {
        IEnumerable<ItemRareDropLocation> enumerable = Enumerable.Empty<ItemRareDropLocation>();
        var items = weapons.Concat(armors.Concat(shields.Concat(units.Concat(mags))));
        foreach (var item in Character.Wishlist.Join(items, w => w, i => i.Name, (w, i) => i))
        {
            if (rareDropsByItem.TryGetValue("0x" + item.Identifier, out var dropLocations))
                enumerable = enumerable.Concat(dropLocations);

            if (questF95EByItem.TryGetValue(item.Identifier!, out var questF95ELocations))
                enumerable = enumerable.Concat(questF95ELocations);

            enumerable = enumerable.Concat(config.QuestF95FResultItems.Where(q => q.ItemDescription == item.Identifier).Select(q => new ItemRareDropLocation(item.Identifier, "Episode 1", "", "", $"Gallon's Plan exchange {q.NumPhotonTickets} Photon Ticket", "1/1")));

            enumerable = enumerable.Concat(config.SecretLotteryResultItems.Where(i => i == item.Identifier).Select(i => new ItemRareDropLocation(item.Identifier, "Episode 1", "", "", $"Good Luck! exchange Secret Ticket", $"1/{config.SecretLotteryResultItems.Length}")));

            enumerable = enumerable.Concat(config.QuestF960SuccessResultItems.SelectMany(q => q.ItemsByDay.SelectMany(i => i.Value, (q, i) => (q.Key, i)).Where(i => i.i.Equals(item.Name, StringComparison.InvariantCultureIgnoreCase)).Select(i => new ItemRareDropLocation(item.Identifier, "", "", "", $"Coren {q.MesetaCost.ToString("N0")} Meseta {i.Key}", $"1/{q.ItemsByDay[i.Key].Length}"))));

            enumerable = enumerable.Concat(config.QuestF960FailureResultItems.SelectMany(q => q.Value.Where(i => i.Replace(" x1", "") == item.Name).Select(i => new ItemRareDropLocation(item.Identifier, "", "", "", $"Coren Failure {q.Key}", $"1/{q.Value.Length}"))));

            switch (item.Identifier)
            {
                case "000103":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                        ]);
                    break;

                case "000104":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                        ]);
                    break;

                case "000107":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                        ]);
                    break;

                case "000200":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000202":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000204":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000207":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000302":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000303":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000304":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000307":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000403":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "000404":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "000406":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                        ]);
                    break;

                case "000500":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000502":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000504":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000507":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000603":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                        ]);
                    break;

                case "000604":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                        ]);
                    break;

                case "000607":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                        ]);
                    break;

                case "000700":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000702":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000704":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000706":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                        ]);
                    break;

                case "000707":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"),
                        ]);
                    break;

                case "000800":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000802":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000804":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000807":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"),
                        ]);
                    break;

                case "000900":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000902":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000904":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000906":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                        ]);
                    break;

                case "000907":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"),
                        ]);
                    break;

                case "000B05":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Force 6‑5:Test/Spaceship 5", "1/1"),
                        ]);
                    break;

                case "000D00":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                        ]);
                    break;

                case "000E00":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Force 5‑5:Test/VR Temple 5", "1/1"),
                        ]);
                    break;

                case "008900":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "008901":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "008B00":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "008B01":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "008C01":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Governement Quests Force 7‑5:Isle of Mutants", "1/1"),
                        ]);
                    break;

                case "031004":
                    enumerable = enumerable.Concat(
                        [
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Normal", "", "Say yes to Alicia on Gallon's Plan", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Hard", "", "Say yes to Alicia on Gallon's Plan", "1/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Very Hard", "", "Say yes to Alicia on Gallon's Plan", "2/1"),
                            new ItemRareDropLocation(item.Identifier, "Episode 1", "Ultimate", "", "Say yes to Alicia on Gallon's Plan", "2/1")
                        ]);
                    break;
            }
        }

        return enumerable.OrderBy(OrderByLocations);
    }

    private int OrderByLocations(ItemRareDropLocation dropLocation)
    {
        int episodeNumber = string.IsNullOrEmpty(dropLocation.EpisodeName) ? 1 : (int)char.GetNumericValue(dropLocation.EpisodeName[^1]);
        int locationIndex = Array.FindIndex(locations.First(l => l.Episode == episodeNumber).Locations, l => l.Id == dropLocation.Location);
        int DifficultyNameToOrder(string name) => name switch
        {
            "Normal" or "" => 0,
            "Hard" => 1,
            "Very Hard" => 2,
            "Ultimate" => 3,
            _ => throw new NotSupportedException()
        };
        int SectionIdNameToId(string name) => name switch
        {
            "Viridia" or "" => 0,
            "Greenill" => 1,
            "Skyly" => 2,
            "Bluefull" => 3,
            "Purplenum" => 4,
            "Pinkal" => 5,
            "Redria" => 6,
            "Oran" => 7,
            "Yellowboze" => 8,
            "Whitill" => 9,
            _ => throw new NotSupportedException()
        };
        return DifficultyNameToOrder(dropLocation.DifficultyName) * 100_000 + episodeNumber * 10000 + locationIndex * 10 + SectionIdNameToId(dropLocation.SectionId);
    }

    private string GetLocationName(string locationId, string episode, string difficulty)
    {
        int episodeNumber = string.IsNullOrEmpty(episode) ? 1 : (int)char.GetNumericValue(episode[^1]);
        var location = locations.First(l => l.Episode == episodeNumber).Locations.FirstOrDefault(l => l.Id == locationId);
        if (location == null) return locationId;
        if (difficulty == "Ultimate" && !string.IsNullOrEmpty(location.UltimateName))
            return location.UltimateName;
        return location.Name;
    }
}
