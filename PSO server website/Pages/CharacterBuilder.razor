@page "/characterBuilder"
@using PSOServerWebsite.Services
@inject LevelTableService levelTableService

<PageTitle>Character Builder</PageTitle>

<h1>Character Builder</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container border rounded">
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Class
                    <InputSelect @bind-Value="Character. ClassRaceSelection" class="form-select" aria-label="Select a class">
                        <option value="">Select a class ...</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Humar)" value="@ClassRace.Humar">HUmar</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Hunewearl)" value="@ClassRace.Hunewearl">HUnewearl</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Hucast)" value="@ClassRace.Hucast">HUcast</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Hucaseal)" value="@ClassRace.Hucaseal">HUcaseal</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Ramar)" value="@ClassRace.Ramar">RAmar</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Ramarl)" value="@ClassRace.Ramarl">RAmarl</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Racast)" value="@ClassRace.Racast">RAcast</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Racaseal)" value="@ClassRace.Racaseal">RAcaseal</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Fomar)" value="@ClassRace.Fomar">FOmar</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Fomarl)" value="@ClassRace.Fomarl">FOmarl</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Fonewm)" value="@ClassRace.Fonewm">FOnewm</option>
                        <option checked="@(Character.ClassRaceSelection== ClassRace.Fonewearl)" value="@ClassRace.Fonewearl">FOnewearl</option>
                    </InputSelect>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Level
                    <InputNumber @bind-Value="Character.Level" DisplayName="Level" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    HP
                    <InputNumber @bind-Value="Character.HP" DisplayName="HP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP
                    <InputNumber @bind-Value="Character.TP" DisplayName="TP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATP
                    <InputNumber @bind-Value="Character.ATP" DisplayName="ATP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    DFP
                    <InputNumber @bind-Value="Character.DFP" DisplayName="DFP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    MST
                    <InputNumber @bind-Value="Character.MST" DisplayName="MST" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATA
                    <InputNumber @bind-Value="Character.ATA" DisplayName="ATA" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    EVP
                    <InputNumber @bind-Value="Character.EVP" DisplayName="EVP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    LCK
                    <InputNumber @bind-Value="Character.LCK" DisplayName="LCK" class="form-control" disabled></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    HP Material
                    <InputNumber @bind-Value="Character.HPMaterial" DisplayName="HP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP Material
                    <InputNumber @bind-Value="Character.TPMaterial" DisplayName="TP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Power Material
                    <InputNumber @bind-Value="Character.PowerMaterial" DisplayName="Power Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Def Material
                    <InputNumber @bind-Value="Character.DefMaterial" DisplayName="Def Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mind Material
                    <InputNumber @bind-Value="Character.MindMaterial" DisplayName="Mind Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Evade Material
                    <InputNumber @bind-Value="Character.EvadeMaterial" DisplayName="Evade Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Luck Material
                    <InputNumber @bind-Value="Character.LuckMaterial" DisplayName="Luck Material" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Weapon
                    <input class="form-control-plaintext form-text" disabled value="@Character.WeaponName" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Armor
                    <input class="form-control-plaintext form-text" disabled value="@Character.ArmorName" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Unit 1
                    <input class="form-control-plaintext form-text" disabled value="@Character.Unit1Name" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Unit 2
                    <input class="form-control-plaintext form-text" disabled value="@Character.Unit2Name" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Unit 3
                    <input class="form-control-plaintext form-text" disabled value="@Character.Unit3Name" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Unit 4
                    <input class="form-control-plaintext form-text" disabled value="@Character.Unit4Name" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Shield
                    <input class="form-control-plaintext form-text" disabled value="@Character.ShieldName" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mag
                    <input class="form-control-plaintext form-text" disabled value="@Character.MagName" />
                    <button class="btn btn-outline-secondary btn-sm">Edit</button>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Shifta Level
                    <InputNumber @bind-Value="Character.ShiftaLevel" DisplayName="Shifta Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@Character.GetShiftaDebandDuration(Character.ShiftaLevel)</span>
            </div>
            <div class="col">
                <label class="form-label">
                    Deband Level
                    <InputNumber @bind-Value="Character.DebandLevel" DisplayName="Deband Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@Character.GetShiftaDebandDuration(Character.DebandLevel)</span>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">

                </label>
            </div>
        </div>
    </div>
}

@code {
    [DisallowNull] private LevelTableModel levelTable = default!;

    [DisallowNull] public CharacterModel Character { get; set; } = default!;

    [MemberNotNullWhen(false, nameof(levelTable))]
    private bool IsLoading => levelTable == null;

    protected override async Task OnInitializedAsync()
    {
        levelTable = await levelTableService.GetLevelTableAsync();
        Character = new(levelTable);
        await base.OnInitializedAsync();
    }

    public enum ClassRace
    {
        Humar,
        Hunewearl,
        Hucast,
        Hucaseal,
        Ramar,
        Ramarl,
        Racast,
        Racaseal,
        Fomar,
        Fomarl,
        Fonewm,
        Fonewearl
    }

    public class CharacterModel(LevelTableModel levelTable)
    {
        private static readonly int[] maxMats = [250, 150, 150, 150, 250, 250, 150, 150, 250, 250, 150, 150];

        private ClassRace? classRaceSelection;
        private int level = 1;
        private int hpMaterial;
        private int tpMaterial;
        private int powerMaterial;
        private int defMaterial;
        private int mindMaterial;
        private int evadeMaterial;
        private int luckMaterial;
        private int shiftaLevel;
        private int debandLevel;

        public ClassRace? ClassRaceSelection
        {
            get { return classRaceSelection; }
            set { classRaceSelection = value; RefreshStats(); }
        }

        public int Level
        {
            get { return level; }
            set
            {
                if (value < 1) value = 1;
                if (value > 200) value = 200;
                level = value; RefreshStats();
            }
        }

        public int HP { get; set; }
        public int TP { get; set; }
        public int ATP { get; set; }
        public int DFP { get; set; }
        public int MST { get; set; }
        public double ATA { get; set; }
        public int EVP { get; set; }
        public int LCK { get; set; }

        public int HPMaterial
        {
            get { return hpMaterial; }
            set
            {
                if (value < 0) value = 0;
                if (value > 125) value = 125;
                hpMaterial = value; RefreshStats();
            }
        }

        public int TPMaterial
        {
            get { return tpMaterial; }
            set
            {
                if (value < 0) value = 0;
                if (value > MaxTPMaterial()) value = MaxTPMaterial();
                tpMaterial = value; RefreshStats();
            }
        }

        public int PowerMaterial
        {
            get { return powerMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxPowerDefEvadeMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial)
                    value -= totalMaterial - maxMaterial;
                powerMaterial = value; RefreshStats();
            }
        }

        public int DefMaterial
        {
            get { return defMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxPowerDefEvadeMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + PowerMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial)
                    value -= totalMaterial - maxMaterial;
                defMaterial = value; RefreshStats();
            }
        }

        public int MindMaterial
        {
            get { return mindMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxMindMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + PowerMaterial + DefMaterial + EvadeMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial)
                    value -= totalMaterial - maxMaterial;
                mindMaterial = value; RefreshStats();
            }
        }

        public int EvadeMaterial
        {
            get { return evadeMaterial; }
            set
            {
                if (value < 0) value = 0;
                var maxMaterial = MaxPowerDefEvadeMaterial();
                if (value > maxMaterial) value = maxMaterial;
                var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + LuckMaterial;
                if (totalMaterial > maxMaterial)
                    value -= totalMaterial - maxMaterial;
                evadeMaterial = value; RefreshStats();
            }
        }

        public int LuckMaterial
        {
            get { return luckMaterial; }
            set
            {
                if (value < 0) value = 0;
                if (value > 45) value = 45;
                var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial;
                if (totalMaterial > MaxPowerDefEvadeMaterial())
                    value -= totalMaterial - MaxPowerDefEvadeMaterial();
                luckMaterial = value; RefreshStats();
            }
        }

        public int ShiftaLevel
        {
            get { return shiftaLevel; }
            set { shiftaLevel = value; RefreshStats(); }
        }

        public int DebandLevel
        {
            get { return debandLevel; }
            set { debandLevel = value; RefreshStats(); }
        }

        public string WeaponName { get; set; } = "";
        public string ArmorName { get; set; } = "";
        public string Unit1Name { get; set; } = "";
        public string Unit2Name { get; set; } = "";
        public string Unit3Name { get; set; } = "";
        public string Unit4Name { get; set; } = "";
        public string ShieldName { get; set; } = "";
        public string MagName { get; set; } = "Mag 5/0/0/0";

        public void RefreshStats()
        {
            if (!ClassRaceSelection.HasValue)
            {
                // Reset values.
                if (Level != 1) Level = 1;
                HP = 0;
                TP = 0;
                ATP = 0;
                DFP = 0;
                MST = 0;
                ATA = 0;
                EVP = 0;
                LCK = 0;
                if (HPMaterial != 0) HPMaterial = 0;
                if (TPMaterial != 0) TPMaterial = 0;
                if (PowerMaterial != 0) PowerMaterial = 0;
                if (DefMaterial != 0) DefMaterial = 0;
                if (MindMaterial != 0) MindMaterial = 0;
                if (EvadeMaterial != 0) EvadeMaterial = 0;
                if (LuckMaterial != 0) LuckMaterial = 0;
                if (ShiftaLevel != 0) ShiftaLevel = 0;
                if (DebandLevel != 0) DebandLevel = 0;
                WeaponName = "";
                ArmorName = "";
                Unit1Name = "";
                Unit2Name = "";
                Unit3Name = "";
                Unit4Name = "";
                ShieldName = "";
                MagName = "Mag 5/0/0/0";
                return;
            }

            int indexClass = (int)ClassRaceSelection;

            // Clamp materials numbers that can change with class selection.
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (TPMaterial > MaxTPMaterial()) TPMaterial = MaxTPMaterial();
            if (PowerMaterial > maxMaterial) PowerMaterial = maxMaterial;
            if (DefMaterial > maxMaterial) DefMaterial = maxMaterial;
            if (MindMaterial > MaxMindMaterial()) MindMaterial = MaxMindMaterial();
            if (EvadeMaterial > maxMaterial) EvadeMaterial = maxMaterial;
            if (PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial > maxMaterial)
            {
                PowerMaterial = 0;
                DefMaterial = 0;
                MindMaterial = 0;
                EvadeMaterial = 0;
                LuckMaterial = 0;
            }

            // Calculate stats.
            var baseStats = levelTable.BaseStats[indexClass];
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            var baseATP = baseStats.ATP + levelDeltas.Sum(l => l.ATP) + GetATPBonus() + PowerMaterial * 2;
            var baseDFP = baseStats.DFP + levelDeltas.Sum(l => l.DFP) + DefMaterial * 2;
            var baseMST = baseStats.MST + levelDeltas.Sum(l => l.MST) + MindMaterial * 2;
            HP = (int)Math.Floor((baseStats.HP + levelDeltas.Sum(l => l.HP) + Level - 1) * GetHPMultiplier()) + HPMaterial * 2;
            TP = ClassRaceSelection switch
            {
                ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Ramar or ClassRace.Ramarl
                    => baseMST + Level - 1,
                ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl
                    => (int)Math.Floor((baseMST + Level - 1) * 1.5),
                _ => 0
            } + TPMaterial * 2;
            ATP = (int)Math.Floor(baseATP + baseATP * GetShiftaDebandMultiplier(ShiftaLevel));
            DFP = (int)Math.Floor(baseDFP + baseDFP * GetShiftaDebandMultiplier(DebandLevel));
            MST = baseMST;
            ATA = baseStats.ATA + levelDeltas.Sum(l => l.ATA) / 10d + GetATABonus();
            EVP = baseStats.EVP + levelDeltas.Sum(l => l.EVP) + EvadeMaterial * 2;
            LCK = baseStats.LCK + levelDeltas.Sum(l => l.LCK) + LuckMaterial * 2;
        }

        private double GetHPMultiplier() => ClassRaceSelection switch
        {
            ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 1.85,
            ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 1.45,
            _ => 2
        };

        private int GetATPBonus() => ClassRaceSelection switch
        {
            ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Hucast or ClassRace.Hucaseal => 10,
            ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 5,
            ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 3,
            _ => 0
        };

        private int GetATABonus() => ClassRaceSelection switch
        {
            ClassRace.Humar or ClassRace.Hunewearl => 38,
            ClassRace.Hucast => 29,
            ClassRace.Hucaseal => 36,
            ClassRace.Ramar => 40,
            ClassRace.Ramarl or ClassRace.Racaseal => 32,
            ClassRace.Racast => 30,
            ClassRace.Fomar or ClassRace.Fomarl => 48,
            ClassRace.Fonewm => 49,
            ClassRace.Fonewearl => 51,
            _ => 0
        };

        private int MaxTPMaterial() => ClassRaceSelection switch
        {
            null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
            _ => 125
        };

        private int MaxPowerDefEvadeMaterial() => ClassRaceSelection.HasValue ? maxMats[(int)ClassRaceSelection] : 0;

        private int MaxMindMaterial() => ClassRaceSelection switch
        {
            null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
            _ => maxMats[(int)ClassRaceSelection]
        };

        private double GetShiftaDebandMultiplier(int shiftaDebandLevel)
            => shiftaDebandLevel == 0 ? 0 : Math.Sign(shiftaDebandLevel) * (1.3 * (Math.Abs(shiftaDebandLevel) - 1) + 10) / 100;
        public TimeSpan GetShiftaDebandDuration(int shiftaDebandLevel)
            => shiftaDebandLevel == 0 ? TimeSpan.Zero : new TimeSpan(0, 0, 10 * (Math.Abs(shiftaDebandLevel) - 1) + 40);
    }
}
