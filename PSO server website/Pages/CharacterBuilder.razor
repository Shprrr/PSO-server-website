@page "/characterBuilder"
@using PSOServerWebsite.Services
@using System.Text.RegularExpressions
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject LevelTableService levelTableService
@inject ItemsService itemsService
@inject ItemPMTService itemPMTService

<PageTitle>Character Builder</PageTitle>

<h1>Character Builder</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container border rounded">
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Class
                    <InputSelect @bind-Value="ClassRaceSelection" class="form-select" aria-label="Select a class">
                        <option value="">Select a class ...</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Humar)" value="@ClassRace.Humar">HUmar</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Hunewearl)" value="@ClassRace.Hunewearl">HUnewearl</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Hucast)" value="@ClassRace.Hucast">HUcast</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Hucaseal)" value="@ClassRace.Hucaseal">HUcaseal</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Ramar)" value="@ClassRace.Ramar">RAmar</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Ramarl)" value="@ClassRace.Ramarl">RAmarl</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Racast)" value="@ClassRace.Racast">RAcast</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Racaseal)" value="@ClassRace.Racaseal">RAcaseal</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fomar)" value="@ClassRace.Fomar">FOmar</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fomarl)" value="@ClassRace.Fomarl">FOmarl</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fonewm)" value="@ClassRace.Fonewm">FOnewm</option>
                        <option selected="@(ClassRaceSelection == ClassRace.Fonewearl)" value="@ClassRace.Fonewearl">FOnewearl</option>
                    </InputSelect>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Level
                    <InputNumber @bind-Value="Level" DisplayName="Level" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    HP
                    <InputNumber @bind-Value="HP" DisplayName="HP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP
                    <InputNumber @bind-Value="TP" DisplayName="TP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATP
                    <InputNumber @bind-Value="ATP" DisplayName="ATP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    DFP
                    <InputNumber @bind-Value="DFP" DisplayName="DFP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    MST
                    <InputNumber @bind-Value="MST" DisplayName="MST" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    ATA
                    <InputNumber @bind-Value="ATA" DisplayName="ATA" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    EVP
                    <InputNumber @bind-Value="EVP" DisplayName="EVP" class="form-control" disabled></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    LCK
                    <InputNumber @bind-Value="LCK" DisplayName="LCK" class="form-control" disabled></InputNumber>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col offset-1">
                <label class="form-label">
                    HP Material
                    <InputNumber @bind-Value="HPMaterial" DisplayName="HP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP Material
                    <InputNumber @bind-Value="TPMaterial" DisplayName="TP Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Power Material
                    <InputNumber @bind-Value="PowerMaterial" DisplayName="Power Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Def Material
                    <InputNumber @bind-Value="DefMaterial" DisplayName="Def Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mind Material
                    <InputNumber @bind-Value="MindMaterial" DisplayName="Mind Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Evade Material
                    <InputNumber @bind-Value="EvadeMaterial" DisplayName="Evade Material" class="form-control"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Luck Material
                    <InputNumber @bind-Value="LuckMaterial" DisplayName="Luck Material" class="form-control"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row small">
            <div class="col-1">
                Target
                <span>@(125 + MaxTPMaterial() + TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial)</span>/<span>@(125 + MaxTPMaterial() + MaxPowerDefEvadeMaterial())</span>
            </div>
            <div class="col">
                <label class="form-label">
                    HP Material
                    <input type="number" class="form-control form-control-sm" value="125" disabled />
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    TP Material
                    <input type="number" class="form-control form-control-sm" value="@MaxTPMaterial()" disabled />
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Power Material
                    <InputNumber @bind-Value="TargetPowerMaterial" DisplayName="Target Power Material" class="form-control form-control-sm"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Def Material
                    <InputNumber @bind-Value="TargetDefMaterial" DisplayName="Target Def Material" class="form-control form-control-sm"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Mind Material
                    <InputNumber @bind-Value="TargetMindMaterial" DisplayName="Target Mind Material" class="form-control form-control-sm"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Evade Material
                    <InputNumber @bind-Value="TargetEvadeMaterial" DisplayName="Target Evade Material" class="form-control form-control-sm"></InputNumber>
                </label>
            </div>
            <div class="col">
                <label class="form-label">
                    Luck Material
                    <InputNumber @bind-Value="TargetLuckMaterial" DisplayName="Target Luck Material" class="form-control form-control-sm"></InputNumber>
                </label>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Weapon
                    <span class="form-control-plaintext form-text">@Character.WeaponName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditWeapon">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Armor
                    <span class="form-control-plaintext form-text">@Character.ArmorName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditArmor">Edit</button>
                </label>
            </div>
            @if (Armor.NumberSlots > 0)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 1
                        <span class="form-control-plaintext form-text">@Character.Unit1Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 1)">Edit</button>
                    </label>
                </div>
            }
            @if (Armor.NumberSlots > 1)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 2
                        <span class="form-control-plaintext form-text">@Character.Unit2Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 2)">Edit</button>
                    </label>
                </div>
            }
            @if (Armor.NumberSlots > 2)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 3
                        <span class="form-control-plaintext form-text">@Character.Unit3Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 3)">Edit</button>
                    </label>
                </div>
            }
            @if (Armor.NumberSlots > 3)
            {
                <div class="col">
                    <label class="form-label d-flex flex-column justify-content-between h-100">
                        Unit 4
                        <span class="form-control-plaintext form-text">@Character.Unit4Name</span>
                        <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditUnit" @onclick="@(()=> EditUnit = 4)">Edit</button>
                    </label>
                </div>
            }
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Shield
                    <span class="form-control-plaintext form-text">@Character.ShieldName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditShield">Edit</button>
                </label>
            </div>
            <div class="col">
                <label class="form-label d-flex flex-column justify-content-between h-100">
                    Mag
                    <span class="form-control-plaintext form-text">@Character.MagName</span>
                    <button class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#modalEditMag">Edit</button>
                </label>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label class="form-label">
                    Shifta Level
                    <InputNumber @bind-Value="ShiftaLevel" DisplayName="Shifta Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@GetShiftaDebandDuration(ShiftaLevel)</span>
            </div>
            <div class="col">
                <label class="form-label">
                    Deband Level
                    <InputNumber @bind-Value="DebandLevel" DisplayName="Deband Level" class="form-control"></InputNumber>
                </label>
                <span class="ms-1">@GetShiftaDebandDuration(DebandLevel)</span>
            </div>
        </div>
    </div>

    <div id="modalEditWeapon" class="modal" onhidden.bs.modal="@(() => RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Weapon</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-12">
                        Weapon
                        <InputSelect @bind-Value="Weapon.Model" class="form-select" aria-label="Select a weapon">
                            <option selected="@(Weapon.Identifier == null)" value=""><i>~ None ~</i></option>
                            @foreach (var weapon in GetItemWithRequirements(weapons))
                            {
                                <option selected="@(Weapon.Identifier == weapon.Identifier)" value="@weapon">@weapon.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-6">
                        Grind
                        <InputNumber @bind-Value="Weapon.Grind" DisplayName="Grind" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-6">
                        Hit
                        <span class="input-group">
                            <InputNumber @bind-Value="Weapon.Hit" DisplayName="Hit" class="form-control"></InputNumber>
                            <span class="input-group-append input-group-text">%</span>
                        </span>
                    </label>
                    <label class="form-label col col-3">
                        ATP
                        <InputNumber Value="@Weapon.Atp" ValueExpression="@(() => Weapon.Atp)" DisplayName="ATP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        ATA
                        <InputNumber Value="@Weapon.Ata" ValueExpression="@(() => Weapon.Ata)" DisplayName="ATA" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        MST
                        <InputNumber Value="@Weapon.Mst" ValueExpression="@(() => Weapon.Mst)" DisplayName="MST" class="form-control" disabled></InputNumber>
                    </label>
                    @foreach (var statBoost in Weapon.GetStatBoosts())
                    {
                        <label class="form-label col col-3">
                            @statBoost.Item1
                            <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                        </label>
                    }
                    @foreach (var statBoost in Weapon.GetTechBoosts())
                    {
                        <label class="form-label col col-4">
                            @statBoost.Item1
                            <InputText Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputText>
                        </label>
                    }
                </div>
                <div class="modal-footer">@Weapon</div>
            </div>
        </div>
    </div>

    <div id="modalEditArmor" class="modal" onhidden.bs.modal="@(() => RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Armor</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-12">
                        Armor
                        <InputSelect @bind-Value="Armor.Model" class="form-select" aria-label="Select an armor">
                            <option selected="@(Armor.Identifier == null)" value=""><i>~ None ~</i></option>
                            @foreach (var armor in GetItemWithRequirements(armors))
                            {
                                <option selected="@(Armor.Identifier == armor.Identifier)" value="@armor">@armor.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-3">
                        DFP
                        <InputNumber Value="@Armor.Dfp" ValueExpression="@(() => Armor.Dfp)" DisplayName="DFP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DFP Bonus
                        <InputNumber @bind-Value="Armor.DfpBonus" DisplayName="DFP Bonus" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP
                        <InputNumber Value="@Armor.Evp" ValueExpression="@(() => Armor.Evp)" DisplayName="EVP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP Bonus
                        <InputNumber @bind-Value="Armor.EvpBonus" DisplayName="EVP Bonus" class="form-control"></InputNumber>
                    </label>
                    @foreach (var statBoost in Armor.GetStatBoosts())
                    {
                        <label class="form-label col col-3">
                            @statBoost.Item1
                            <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                        </label>
                    }
                    <label class="form-label col col-12">
                        Slots
                        <InputNumber @bind-Value="Armor.NumberSlots" DisplayName="Slots" class="form-control"></InputNumber>
                    </label>
                    @foreach (var statBoost in Armor.GetTechBoosts())
                    {
                        <label class="form-label col col-4">
                            @statBoost.Item1
                            <InputText Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputText>
                        </label>
                    }
                </div>
                <div class="modal-footer">@Armor</div>
            </div>
        </div>
    </div>

    <div id="modalEditUnit" class="modal" onhidden.bs.modal="@(() => RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            @if (EditUnit > 0)
            {
                <div class="modal-content">
                    <div class="modal-header">
                        <span>Unit</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body container row">
                        <label class="form-label col col-12">
                            Unit
                            <InputSelect @bind-Value="EditUnitModel.Model" class="form-select" aria-label="Select an unit">
                                <option selected="@(EditUnitModel.Identifier == null)" value=""><i>~ None ~</i></option>
                                @foreach (var unit in GetItemWithRequirements(units))
                                {
                                    <option selected="@(EditUnitModel.Identifier == unit.Identifier)" value="@unit">@unit.Name</option>
                                }
                            </InputSelect>
                        </label>
                        @if (EditUnitModel.Identifier != null && itemPMT.Units[EditUnitModel.Identifier].CanHaveModifier)
                        {
                            <label class="form-label col col-3">
                                +/-
                                <InputNumber @bind-Value="EditUnitModel.Modifier" DisplayName="+/-" class="form-control"></InputNumber>
                            </label>
                        }
                        @foreach (var statBoost in EditUnitModel.GetStatBoosts())
                        {
                            <label class="form-label col col-3">
                                @statBoost.Item1
                                <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                            </label>
                        }
                    </div>
                    <div class="modal-footer">@EditUnitModel.ToString()</div>
                </div>
            }
        </div>
    </div>

    <div id="modalEditShield" class="modal" onhidden.bs.modal="@(() => RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Shield</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-12">
                        Shield
                        <InputSelect @bind-Value="Shield.Model" class="form-select" aria-label="Select a shield">
                            <option selected="@(Shield.Identifier == null)" value=""><i>~ None ~</i></option>
                            @foreach (var shield in GetItemWithRequirements(shields))
                            {
                                <option selected="@(Shield.Identifier == shield.Identifier)" value="@shield">@shield.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-3">
                        DFP
                        <InputNumber Value="@Shield.Dfp" ValueExpression="@(() => Shield.Dfp)" DisplayName="DFP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DFP Bonus
                        <InputNumber @bind-Value="Shield.DfpBonus" DisplayName="DFP Bonus" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP
                        <InputNumber Value="@Shield.Evp" ValueExpression="@(() => Shield.Evp)" DisplayName="EVP" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        EVP Bonus
                        <InputNumber @bind-Value="Shield.EvpBonus" DisplayName="EVP Bonus" class="form-control"></InputNumber>
                    </label>
                    @foreach (var statBoost in Shield.GetStatBoosts())
                    {
                        <label class="form-label col col-3">
                            @statBoost.Item1
                            <InputNumber Value="@statBoost.Item2" ValueExpression="@(() => statBoost.Item2)" DisplayName="@statBoost.Item1" class="form-control" disabled></InputNumber>
                        </label>
                    }
                </div>
                <div class="modal-footer">@Shield</div>
            </div>
        </div>
    </div>

    <div id="modalEditMag" class="modal" onhidden.bs.modal="@(() => RefreshStats())">
        <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <span>Mag</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body container row">
                    <label class="form-label col col-6">
                        Mag
                        <InputSelect @bind-Value="Mag.Name" class="form-select" aria-label="Select a mag">
                            <option value=""><i>~ None ~</i></option>
                            @foreach (var mag in mags)
                            {
                                <option value="@mag.Name">@mag.Name</option>
                            }
                        </InputSelect>
                    </label>
                    <label class="form-label col col-6">
                        Level
                        <InputNumber Value="@Mag.Level" ValueExpression="@(() => Mag.Level)" DisplayName="Level" class="form-control" disabled></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DEF
                        <InputNumber @bind-Value="Mag.Def" DisplayName="DEF" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        POW
                        <InputNumber @bind-Value="Mag.Pow" DisplayName="POW" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        DEX
                        <InputNumber @bind-Value="Mag.Dex" DisplayName="DEX" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-3">
                        MIND
                        <InputNumber @bind-Value="Mag.Mind" DisplayName="MIND" class="form-control"></InputNumber>
                    </label>
                    <label class="form-label col col-6 visually-hidden">
                        Syncro
                    </label>
                    <label class="form-label col col-6 visually-hidden">
                        IQ
                    </label>
                    <label class="form-label col col-6 visually-hidden">
                        PB
                    </label>
                </div>
                <div class="modal-footer">@Mag</div>
            </div>
        </div>
    </div>
}

@code {
    [DisallowNull] private LevelTableModel levelTable = default!;
    [DisallowNull] private ItemPMTModel itemPMT = default!;
    [DisallowNull] private ItemModel[] weapons = default!;
    [DisallowNull] private ItemModel[] armors = default!;
    [DisallowNull] private ItemModel[] units = default!;
    [DisallowNull] private ItemModel[] shields = default!;
    [DisallowNull] private ItemModel[] mags = default!;

    [DisallowNull] public CharacterModel Character { get; set; } = default!;
    private int EditUnit { get; set; }
    private UnitModel EditUnitModel => EditUnit switch
    {
        1 => Unit1,
        2 => Unit2,
        3 => Unit3,
        4 => Unit4,
        _ => throw new NotSupportedException()
    };

    [MemberNotNullWhen(false, nameof(levelTable), nameof(itemPMT), nameof(weapons), nameof(armors), nameof(units), nameof(shields), nameof(mags))]
    private bool IsLoading => levelTable == null || itemPMT == null || weapons == null || armors == null || units == null || shields == null || mags == null;

    protected override async Task OnInitializedAsync()
    {
        levelTable = await levelTableService.GetLevelTableAsync();
        itemPMT = await itemPMTService.GetItemsAsync();
        var items = (await itemsService.GetItemsAsync()).ToArray();
        weapons = items.Where(i => i.Identifier.StartsWith("00")).ToArray();
        armors = items.Where(i => i.Identifier.StartsWith("0101")).ToArray();
        shields = items.Where(i => i.Identifier.StartsWith("0102")).ToArray();
        units = items.Where(i => i.Identifier.StartsWith("0103")).ToArray();
        mags = items.Where(i => i.Identifier.StartsWith("02")).ToArray();
        weapon = new(itemPMT);
        armor = new(itemPMT);
        unit1 = new(itemPMT);
        unit2 = new(itemPMT);
        unit3 = new(itemPMT);
        unit4 = new(itemPMT);
        shield = new(itemPMT);

        List<CharacterModel>? characters = await localStorage.GetItemAsync<List<CharacterModel>>("characters");
        if (characters?.Count > 0)
        {
            Character = characters[0];
            // Keep equipment names because they will be erased when assigning other equipment.
            string weaponName = Character.WeaponName;
            string armorName = Character.ArmorName;
            string unit1Name = Character.Unit1Name;
            string unit2Name = Character.Unit2Name;
            string unit3Name = Character.Unit3Name;
            string unit4Name = Character.Unit4Name;
            string shieldName = Character.ShieldName;
            // It's this order because each one helps with requirements for other equipment.
            Mag = MagModel.Parse(Character.MagName);
            Armor = ArmorModel.Parse(itemPMT, armors, armorName);
            Unit1 = UnitModel.Parse(itemPMT, units, unit1Name);
            Unit2 = UnitModel.Parse(itemPMT, units, unit2Name);
            Unit3 = UnitModel.Parse(itemPMT, units, unit3Name);
            Unit4 = UnitModel.Parse(itemPMT, units, unit4Name);
            Shield = ShieldModel.Parse(itemPMT, shields, shieldName);
            Weapon = WeaponModel.Parse(itemPMT, weapons, weaponName);
            RefreshStats();
        }
        else
            Character = new();

        await base.OnInitializedAsync();
    }

    public enum ClassRace
    {
        Humar,
        Hunewearl,
        Hucast,
        Hucaseal,
        Ramar,
        Ramarl,
        Racast,
        Racaseal,
        Fomar,
        Fomarl,
        Fonewm,
        Fonewearl
    }
    private static readonly int[] maxMats = [250, 150, 150, 150, 250, 250, 150, 150, 250, 250, 150, 150];

    [DisallowNull] private WeaponModel weapon = default!;
    [DisallowNull] private ArmorModel armor = default!;
    [DisallowNull] private UnitModel unit1 = default!;
    [DisallowNull] private UnitModel unit2 = default!;
    [DisallowNull] private UnitModel unit3 = default!;
    [DisallowNull] private UnitModel unit4 = default!;
    [DisallowNull] private ShieldModel shield = default!;
    [DisallowNull] private MagModel mag = MagModel.Parse("Mag 5/0/0/0");

    public ClassRace? ClassRaceSelection
    {
        get { return Character.ClassRaceSelection; }
        set { Character.ClassRaceSelection = value; RefreshStats(); }
    }

    public int Level
    {
        get { return Character.Level; }
        set
        {
            if (value < 1) value = 1;
            if (value > 200) value = 200;
            Character.Level = value; RefreshStats();
        }
    }

    public int HP { get; set; }
    public int TP { get; set; }
    public int BaseATP
    {
        get
        {
            if (!ClassRaceSelection.HasValue) return 0;
            int indexClass = (int)ClassRaceSelection;
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            return levelTable.BaseStats[indexClass].ATP + levelDeltas.Sum(l => l.ATP) + GetATPBonus() + (PowerMaterial + Mag.Pow) * 2;
        }
    }
    public int ATP { get; set; }
    public int DFP { get; set; }
    public int BaseMST
    {
        get
        {
            if (!ClassRaceSelection.HasValue) return 0;
            int indexClass = (int)ClassRaceSelection;
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            return levelTable.BaseStats[indexClass].MST + levelDeltas.Sum(l => l.MST) + (MindMaterial + Mag.Mind) * 2;
        }
    }
    public int MST { get; set; }
    public float BaseATA
    {
        get
        {
            if (!ClassRaceSelection.HasValue) return 0;
            int indexClass = (int)ClassRaceSelection;
            var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
            return levelTable.BaseStats[indexClass].ATA + levelDeltas.Sum(l => l.ATA) / 10f + GetATABonus() + Mag.Dex / 2;
        }
    }
    public float ATA { get; set; }
    public int EVP { get; set; }
    public int LCK { get; set; }

    public int HPMaterial
    {
        get { return Character.HPMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > 125) value = 125;
            Character.HPMaterial = value; RefreshStats();
        }
    }

    public int TPMaterial
    {
        get { return Character.TPMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > MaxTPMaterial()) value = MaxTPMaterial();
            Character.TPMaterial = value; RefreshStats();
        }
    }

    public int PowerMaterial
    {
        get { return Character.PowerMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.PowerMaterial = value; RefreshStats();
        }
    }

    public int DefMaterial
    {
        get { return Character.DefMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + PowerMaterial + MindMaterial + EvadeMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.DefMaterial = value; RefreshStats();
        }
    }

    public int MindMaterial
    {
        get { return Character.MindMaterial; }
        set
        {
            var maxMaterial = MaxMindMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + PowerMaterial + DefMaterial + EvadeMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            if (value < 0) value = 0;
            Character.MindMaterial = value; RefreshStats();
        }
    }

    public int EvadeMaterial
    {
        get { return Character.EvadeMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + LuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.EvadeMaterial = value; RefreshStats();
        }
    }

    public int LuckMaterial
    {
        get { return Character.LuckMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > 45) value = 45;
            var totalMaterial = value + PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial;
            if (totalMaterial > MaxPowerDefEvadeMaterial()) value -= totalMaterial - MaxPowerDefEvadeMaterial();
            Character.LuckMaterial = value; RefreshStats();
        }
    }

    public int TargetPowerMaterial
    {
        get { return Character.TargetPowerMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.TargetPowerMaterial = value; RefreshStats();
        }
    }

    public int TargetDefMaterial
    {
        get { return Character.TargetDefMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetPowerMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.TargetDefMaterial = value; RefreshStats();
        }
    }

    public int TargetMindMaterial
    {
        get { return Character.TargetMindMaterial; }
        set
        {
            var maxMaterial = MaxMindMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetPowerMaterial + TargetDefMaterial + TargetEvadeMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            if (value < 0) value = 0;
            Character.TargetMindMaterial = value; RefreshStats();
        }
    }

    public int TargetEvadeMaterial
    {
        get { return Character.TargetEvadeMaterial; }
        set
        {
            if (value < 0) value = 0;
            var maxMaterial = MaxPowerDefEvadeMaterial();
            if (value > maxMaterial) value = maxMaterial;
            var totalMaterial = value + TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetLuckMaterial;
            if (totalMaterial > maxMaterial) value -= totalMaterial - maxMaterial;
            Character.TargetEvadeMaterial = value; RefreshStats();
        }
    }

    public int TargetLuckMaterial
    {
        get { return Character.TargetLuckMaterial; }
        set
        {
            if (value < 0) value = 0;
            if (value > 45) value = 45;
            var totalMaterial = value + TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial;
            if (totalMaterial > MaxPowerDefEvadeMaterial()) value -= totalMaterial - MaxPowerDefEvadeMaterial();
            Character.TargetLuckMaterial = value; RefreshStats();
        }
    }

    public int ShiftaLevel
    {
        get { return Character.ShiftaLevel; }
        set { Character.ShiftaLevel = value; RefreshStats(); }
    }

    public int DebandLevel
    {
        get { return Character.DebandLevel; }
        set { Character.DebandLevel = value; RefreshStats(); }
    }

    public WeaponModel Weapon
    {
        get { return weapon; }
        set { weapon = value; RefreshStats(); }
    }

    public ArmorModel Armor
    {
        get { return armor; }
        set { armor = value; RefreshStats(); }
    }

    public UnitModel Unit1
    {
        get { return unit1; }
        set { unit1 = value; RefreshStats(); }
    }

    public UnitModel Unit2
    {
        get { return unit2; }
        set { unit2 = value; RefreshStats(); }
    }

    public UnitModel Unit3
    {
        get { return unit3; }
        set { unit3 = value; RefreshStats(); }
    }

    public UnitModel Unit4
    {
        get { return unit4; }
        set { unit4 = value; RefreshStats(); }
    }

    public ShieldModel Shield
    {
        get { return shield; }
        set { shield = value; RefreshStats(); }
    }

    public MagModel Mag
    {
        get { return mag; }
        set { mag = value; RefreshStats(); }
    }

    public void RefreshStats()
    {
        if (!ClassRaceSelection.HasValue)
        {
            // Reset values.
            if (Level != 1) Character.Level = 1;
            HP = 0;
            TP = 0;
            ATP = 0;
            DFP = 0;
            MST = 0;
            ATA = 0;
            EVP = 0;
            LCK = 0;
            if (HPMaterial != 0) Character.HPMaterial = 0;
            if (TPMaterial != 0) Character.TPMaterial = 0;
            if (PowerMaterial != 0) Character.PowerMaterial = 0;
            if (DefMaterial != 0) Character.DefMaterial = 0;
            if (MindMaterial != 0) Character.MindMaterial = 0;
            if (EvadeMaterial != 0) Character.EvadeMaterial = 0;
            if (LuckMaterial != 0) Character.LuckMaterial = 0;
            if (TargetPowerMaterial != 0) Character.TargetPowerMaterial = 0;
            if (TargetDefMaterial != 0) Character.TargetDefMaterial = 0;
            if (TargetMindMaterial != 0) Character.TargetMindMaterial = 0;
            if (TargetEvadeMaterial != 0) Character.TargetEvadeMaterial = 0;
            if (TargetLuckMaterial != 0) Character.TargetLuckMaterial = 0;
            if (ShiftaLevel != 0) Character.ShiftaLevel = 0;
            if (DebandLevel != 0) Character.DebandLevel = 0;
            if (Character.WeaponName != "") { Character.WeaponName = ""; Weapon = new(itemPMT); }
            if (Character.ArmorName != "") { Character.ArmorName = ""; Armor = new(itemPMT); }
            if (Character.Unit1Name != "") { Character.Unit1Name = ""; Unit1 = new(itemPMT); }
            if (Character.Unit2Name != "") { Character.Unit2Name = ""; Unit2 = new(itemPMT); }
            if (Character.Unit3Name != "") { Character.Unit3Name = ""; Unit3 = new(itemPMT); }
            if (Character.Unit4Name != "") { Character.Unit4Name = ""; Unit4 = new(itemPMT); }
            if (Character.ShieldName != "") { Character.ShieldName = ""; Shield = new(itemPMT); }
            if (Character.MagName != "Mag 5/0/0/0") { Character.MagName = "Mag 5/0/0/0"; Mag = MagModel.Parse("Mag 5/0/0/0"); }
            return;
        }

        int indexClass = (int)ClassRaceSelection;

        // Clamp materials numbers that can change with class selection.
        var maxMaterial = MaxPowerDefEvadeMaterial();
        if (TPMaterial > MaxTPMaterial()) TPMaterial = MaxTPMaterial();
        if (PowerMaterial > maxMaterial) PowerMaterial = maxMaterial;
        if (DefMaterial > maxMaterial) DefMaterial = maxMaterial;
        if (MindMaterial > MaxMindMaterial()) MindMaterial = MaxMindMaterial();
        if (EvadeMaterial > maxMaterial) EvadeMaterial = maxMaterial;
        if (PowerMaterial + DefMaterial + MindMaterial + EvadeMaterial + LuckMaterial > maxMaterial)
        {
            PowerMaterial = 0;
            DefMaterial = 0;
            MindMaterial = 0;
            EvadeMaterial = 0;
            LuckMaterial = 0;
        }
        if (TargetPowerMaterial > maxMaterial) TargetPowerMaterial = maxMaterial;
        if (TargetDefMaterial > maxMaterial) TargetDefMaterial = maxMaterial;
        if (TargetMindMaterial > MaxMindMaterial()) TargetMindMaterial = MaxMindMaterial();
        if (TargetEvadeMaterial > maxMaterial) TargetEvadeMaterial = maxMaterial;
        if (TargetPowerMaterial + TargetDefMaterial + TargetMindMaterial + TargetEvadeMaterial + TargetLuckMaterial > maxMaterial)
        {
            TargetPowerMaterial = 0;
            TargetDefMaterial = 0;
            TargetMindMaterial = 0;
            TargetEvadeMaterial = 0;
            TargetLuckMaterial = 0;
        }

        // Set equipment names.
        if (Character.WeaponName != Weapon.ToString()) Character.WeaponName = Weapon.ToString();
        if (Character.ArmorName != Armor.ToString()) Character.ArmorName = Armor.ToString();
        if (Character.Unit1Name != Unit1.ToString()) Character.Unit1Name = Unit1.ToString();
        if (Character.Unit2Name != Unit2.ToString()) Character.Unit2Name = Unit2.ToString();
        if (Character.Unit3Name != Unit3.ToString()) Character.Unit3Name = Unit3.ToString();
        if (Character.Unit4Name != Unit4.ToString()) Character.Unit4Name = Unit4.ToString();
        if (Character.ShieldName != Shield.ToString()) Character.ShieldName = Shield.ToString();
        if (Character.MagName != Mag.ToString()) Character.MagName = Mag.ToString();

        // Reset equipment that don't meet requirements.
        if (Weapon.Model != null && !GetItemWithRequirements(Weapon.Model).Any()) Weapon = new(itemPMT);
        if (Armor.Model != null && !GetItemWithRequirements(Armor.Model).Any()) Armor = new(itemPMT);
        if (Unit1.Model != null && (Armor.NumberSlots < 1 || !GetItemWithRequirements(Unit1.Model).Any())) Unit1 = new(itemPMT);
        if (Unit2.Model != null && (Armor.NumberSlots < 2 || !GetItemWithRequirements(Unit2.Model).Any())) Unit2 = new(itemPMT);
        if (Unit3.Model != null && (Armor.NumberSlots < 3 || !GetItemWithRequirements(Unit3.Model).Any())) Unit3 = new(itemPMT);
        if (Unit4.Model != null && (Armor.NumberSlots < 4 || !GetItemWithRequirements(Unit4.Model).Any())) Unit4 = new(itemPMT);
        if (Shield.Model != null && !GetItemWithRequirements(Shield.Model).Any()) Shield = new(itemPMT);

        // Calculate stats.
        var baseStats = levelTable.BaseStats[indexClass];
        var levelDeltas = levelTable.LevelDeltas[indexClass].Take(Level);
        var baseATP = BaseATP + Weapon.BaseAtp + GetEveryStatBoost().Sum(s => CalculateStatBoost("ATP", s.Item1, s.Item2));
        var baseDFP = baseStats.DFP + levelDeltas.Sum(l => l.DFP) + DefMaterial * 2 + Armor.Dfp + Shield.Dfp
            + GetEveryStatBoost().Sum(s => CalculateStatBoost("DFP", s.Item1, s.Item2)) + Mag.Def;
        var baseMST = BaseMST + Weapon.Mst + GetEveryStatBoost().Sum(s => CalculateStatBoost("MST", s.Item1, s.Item2));
        HP = (int)Math.Floor((baseStats.HP + levelDeltas.Sum(l => l.HP) + Level - 1) * GetHPMultiplier()) + HPMaterial * 2
            + GetEveryStatBoost().Sum(s => CalculateStatBoost("HP", s.Item1, s.Item2));
        TP = ClassRaceSelection switch
        {
            ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Ramar or ClassRace.Ramarl
                => baseMST + Level - 1 + GetEveryStatBoost().Sum(s => CalculateStatBoost("TP", s.Item1, s.Item2)),
            ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl
                => (int)Math.Floor((baseMST + Level - 1) * 1.5 + GetEveryStatBoost().Sum(s => CalculateStatBoost("TP", s.Item1, s.Item2))),
            _ => 0
        } + TPMaterial * 2;
        ATP = (int)Math.Floor(baseATP + baseATP * GetShiftaDebandMultiplier(ShiftaLevel)) + Weapon.Atp - Weapon.BaseAtp;
        DFP = (int)Math.Floor(baseDFP + baseDFP * GetShiftaDebandMultiplier(DebandLevel));
        MST = baseMST;
        ATA = BaseATA + Weapon.Ata + GetEveryStatBoost().Sum(s => CalculateStatBoost("ATA", s.Item1, s.Item2));
        EVP = baseStats.EVP + levelDeltas.Sum(l => l.EVP) + EvadeMaterial * 2 + Armor.Evp + Shield.Evp
            + GetEveryStatBoost().Sum(s => CalculateStatBoost("EVP", s.Item1, s.Item2));
        LCK = baseStats.LCK + levelDeltas.Sum(l => l.LCK) + LuckMaterial * 2
            + GetEveryStatBoost().Sum(s => CalculateStatBoost("LCK", s.Item1, s.Item2));

        localStorage.SetItemAsync("characters", new[] { Character });
    }

    private double GetHPMultiplier() => ClassRaceSelection switch
    {
        ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 1.85,
        ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 1.45,
        _ => 2
    };

    private int GetATPBonus() => ClassRaceSelection switch
    {
        ClassRace.Humar or ClassRace.Hunewearl or ClassRace.Hucast or ClassRace.Hucaseal => 10,
        ClassRace.Ramar or ClassRace.Ramarl or ClassRace.Racast or ClassRace.Racaseal => 5,
        ClassRace.Fomar or ClassRace.Fomarl or ClassRace.Fonewm or ClassRace.Fonewearl => 3,
        _ => 0
    };

    private int GetATABonus() => ClassRaceSelection switch
    {
        ClassRace.Humar or ClassRace.Hunewearl => 38,
        ClassRace.Hucast => 29,
        ClassRace.Hucaseal => 36,
        ClassRace.Ramar => 40,
        ClassRace.Ramarl or ClassRace.Racaseal => 32,
        ClassRace.Racast => 30,
        ClassRace.Fomar or ClassRace.Fomarl => 48,
        ClassRace.Fonewm => 49,
        ClassRace.Fonewearl => 51,
        _ => 0
    };

    private IEnumerable<ItemModel> GetItemWithRequirements(params ItemModel[] items)
    {
        if (!ClassRaceSelection.HasValue) yield break;

        foreach (var (item, weapon) in items.Join(itemPMT.Weapons, i => i.Identifier, w => w.Key, (i, w) => (item: i, weapon: w.Value)))
        {
            bool meetRequirement = weapon.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
            meetRequirement &= BaseATP >= weapon.ATPRequired;
            meetRequirement &= BaseATA >= weapon.ATARequired;
            meetRequirement &= BaseMST >= weapon.MSTRequired;
            if (meetRequirement) yield return item;
        }

        foreach (var (item, armor) in items.Join(itemPMT.Armors, i => i.Identifier, a => a.Key, (i, a) => (item: i, armor: a.Value)))
        {
            bool meetRequirement = armor.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
            meetRequirement &= Level > armor.RequiredLevel;
            if (meetRequirement) yield return item;
        }

        foreach (var (item, unit) in items.Join(itemPMT.Units, i => i.Identifier, u => u.Key, (i, u) => (item: i, unit: u.Value)))
        {
            bool meetRequirement = unit.ClassFlags.HasFlag(ItemPMTService.ClassFlagsByClass[(int)ClassRaceSelection]);
            if (meetRequirement) yield return item;
        }
    }

    private IEnumerable<Tuple<string, int>> GetEveryStatBoost()
        => Weapon.GetStatBoosts().Concat(Armor.GetStatBoosts().Concat(Unit1.GetStatBoosts().Concat(Unit2.GetStatBoosts().Concat(Unit3.GetStatBoosts().Concat(Unit4.GetStatBoosts().Concat(Shield.GetStatBoosts()))))));

    private int CalculateStatBoost(string stat, string statBoost, int amount)
    {
        if (ClassRaceSelection is ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal && stat is "MST" or "TP") return 0;
        if (statBoost == stat || statBoost == $"+{stat}" || statBoost == "+All" && stat != "HP") return amount;
        if (statBoost == $"-{stat}" || statBoost == "-All" && stat != "HP") return -1 * amount;
        return 0;
    }

    private int MaxTPMaterial() => ClassRaceSelection switch
    {
        null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
        _ => 125
    };

    private int MaxPowerDefEvadeMaterial() => ClassRaceSelection.HasValue ? maxMats[(int)ClassRaceSelection] : 0;

    private int MaxMindMaterial() => ClassRaceSelection switch
    {
        null or ClassRace.Hucast or ClassRace.Hucaseal or ClassRace.Racast or ClassRace.Racaseal => 0,
        _ => maxMats[(int)ClassRaceSelection]
    };

    private double GetShiftaDebandMultiplier(int shiftaDebandLevel)
        => shiftaDebandLevel == 0 ? 0 : Math.Sign(shiftaDebandLevel) * (1.3 * (Math.Abs(shiftaDebandLevel) - 1) + 10) / 100;
    private TimeSpan GetShiftaDebandDuration(int shiftaDebandLevel)
        => shiftaDebandLevel == 0 ? TimeSpan.Zero : new TimeSpan(0, 0, 10 * (Math.Abs(shiftaDebandLevel) - 1) + 40);

    public class CharacterModel
    {
        public ClassRace? ClassRaceSelection { get; set; }

        public int Level { get; set; } = 1;

        public int HPMaterial { get; set; }
        public int TPMaterial { get; set; }
        public int PowerMaterial { get; set; }
        public int DefMaterial { get; set; }
        public int MindMaterial { get; set; }
        public int EvadeMaterial { get; set; }
        public int LuckMaterial { get; set; }

        public int TargetPowerMaterial { get; set; }
        public int TargetDefMaterial { get; set; }
        public int TargetMindMaterial { get; set; }
        public int TargetEvadeMaterial { get; set; }
        public int TargetLuckMaterial { get; set; }

        public int ShiftaLevel { get; set; }
        public int DebandLevel { get; set; }

        public string WeaponName { get; set; } = "";
        public string ArmorName { get; set; } = "";
        public string Unit1Name { get; set; } = "";
        public string Unit2Name { get; set; } = "";
        public string Unit3Name { get; set; } = "";
        public string Unit4Name { get; set; } = "";
        public string ShieldName { get; set; } = "";
        public string MagName { get; set; } = "Mag 5/0/0/0";
    }

    public class WeaponModel(ItemPMTModel itemPMT)
    {
        private int grind;
        private int hit;

        private ItemModel? model;

        public ItemModel? Model
        {
            get { return model; }
            set
            {
                model = value;
                if (Identifier == null) return;
                var maxGrind = itemPMT.Weapons[Identifier].MaxGrind;
                if (Grind > maxGrind) Grind = maxGrind;
            }
        }

        public string? Identifier => Model?.Identifier;
        public string Name => Model?.Name ?? "";

        public int BaseAtp => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Weapons[Identifier].ATPMax - itemPMT.Weapons[Identifier].ATPMin;
        public int Atp => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Weapons[Identifier].ATPMax + Grind * 2;
        public int Ata => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Weapons[Identifier].ATA + Hit;
        public int Mst => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Weapons[Identifier].MST;

        public int Grind
        {
            get { return grind; }
            set
            {
                if (string.IsNullOrEmpty(Identifier)) return;
                if (value < 0) value = 0;
                var maxGrind = itemPMT.Weapons[Identifier].MaxGrind;
                if (value > maxGrind) value = maxGrind;
                grind = value;
            }
        }

        public int Hit
        {
            get { return hit; }
            set
            {
                if (value < 0) value = 0;
                if (value > 100) value = 100;
                hit = value;
            }
        }

        public IEnumerable<Tuple<string, int>> GetStatBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] statNames = ["None", "+ATP", "+ATA", "+EVP", "+DFP", "+MST", "+HP", "+LCK", "+All", "-ATP", "-ATA", "-EVP", "-DFP", "-MST", "-HP", "-LCK", "-All"];
            var statBoost = itemPMT.StatBoosts[itemPMT.Weapons[Identifier].StatBoost];
            if (statBoost.Stat1 != 0) yield return Tuple.Create<string, int>(statNames[statBoost.Stat1], statBoost.Amount1);
            if (statBoost.Stat2 != 0) yield return Tuple.Create<string, int>(statNames[statBoost.Stat2], statBoost.Amount2);
        }

        public IEnumerable<Tuple<string, string>> GetTechBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] techNames = ["Foie", "Gifoie", "Rafoie", "Barta", "Gibarta", "Rabarta", "Zonde", "Gizonde", "Razonde", "Grants", "Deband", "Jellen", "Zalure", "Shifta", "Ryuker", "Resta", "Anti", "Reverser", "Megid"];
            var techBoost = itemPMT.TechBoosts[itemPMT.Weapons[Identifier].TechBoost];
            string BoostToString(string techName, float boost) => techName switch
            {
                "Deband" or "Jellen" or "Zalure" or "Shifta" or "Resta" or "Anti" => (boost).ToString("P0") + " Range",
                "Megid" => "Pierce",
                _ => (boost).ToString("P0")
            };
            if (techBoost.Tech1 >= 0) yield return Tuple.Create<string, string>(techNames[techBoost.Tech1], BoostToString(techNames[techBoost.Tech1], techBoost.Boost1));
            if (techBoost.Tech2 >= 0) yield return Tuple.Create<string, string>(techNames[techBoost.Tech2], BoostToString(techNames[techBoost.Tech2], techBoost.Boost2));
            if (techBoost.Tech3 >= 0) yield return Tuple.Create<string, string>(techNames[techBoost.Tech3], BoostToString(techNames[techBoost.Tech3], techBoost.Boost3));
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (Grind != 0) s += $" +{Grind}";
            if (Hit != 0) s += $" 0/0/0/0/{Hit}";
            return s;
        }

        public static WeaponModel Parse(ItemPMTModel itemPMT, ItemModel[] weapons, string weapon)
        {
            WeaponModel weaponModel = new(itemPMT);
            Match m = Regex.Match(weapon, @"^(.+?)(?: \+(\d+?))?(?: 0/0/0/0/(\d+?))?$", RegexOptions.Singleline);
            if (!m.Success) return weaponModel;
            weaponModel.Model = weapons.FirstOrDefault(i => i.Name == m.Groups[1].Value);
            if (m.Groups[2].Success) weaponModel.Grind = int.Parse(m.Groups[2].Value);
            if (m.Groups[3].Success) weaponModel.Hit = int.Parse(m.Groups[3].Value);
            return weaponModel;
        }
    }

    public class BaseArmorModel(ItemPMTModel itemPMT)
    {
        private int dfpBonus;
        private int evpBonus;

        private ItemModel? model;

        public ItemModel? Model
        {
            get { return model; }
            set
            {
                model = value;
                if (Identifier == null) return;
                var dfpBonusMax = itemPMT.Armors[Identifier].DFPRange;
                if (DfpBonus > dfpBonusMax) DfpBonus = dfpBonusMax;
                var evpBonusMax = itemPMT.Armors[Identifier].EVPRange;
                if (EvpBonus > evpBonusMax) EvpBonus = evpBonusMax;
            }
        }

        public string? Identifier => Model?.Identifier;
        public string Name => Model?.Name ?? "";

        public int Dfp => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Armors[Identifier].DFP + DfpBonus;
        public int DfpBonus
        {
            get { return dfpBonus; }
            set
            {
                if (string.IsNullOrEmpty(Identifier)) return;
                if (value < 0) value = 0;
                var dfpBonusMax = itemPMT.Armors[Identifier].DFPRange;
                if (value > dfpBonusMax) value = dfpBonusMax;
                dfpBonus = value;
            }
        }

        public int Evp => string.IsNullOrEmpty(Identifier) ? 0 : itemPMT.Armors[Identifier].EVP + EvpBonus;
        public int EvpBonus
        {
            get { return evpBonus; }
            set
            {
                if (string.IsNullOrEmpty(Identifier)) return;
                if (value < 0) value = 0;
                var evpBonusMax = itemPMT.Armors[Identifier].EVPRange;
                if (value > evpBonusMax) value = evpBonusMax;
                evpBonus = value;
            }
        }

        public IEnumerable<Tuple<string, int>> GetStatBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] statNames = ["None", "+ATP", "+ATA", "+EVP", "+DFP", "+MST", "+HP", "+LCK", "+All", "-ATP", "-ATA", "-EVP", "-DFP", "-MST", "-HP", "-LCK", "-All"];
            var statBoost = itemPMT.StatBoosts[itemPMT.Armors[Identifier].StatBoost];
            if (statBoost.Stat1 != 0) yield return Tuple.Create<string, int>(statNames[statBoost.Stat1], statBoost.Amount1);
            if (statBoost.Stat2 != 0) yield return Tuple.Create<string, int>(statNames[statBoost.Stat2], statBoost.Amount2);
        }

        public IEnumerable<Tuple<string, string>> GetTechBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] techNames = ["Foie", "Gifoie", "Rafoie", "Barta", "Gibarta", "Rabarta", "Zonde", "Gizonde", "Razonde", "Grants", "Deband", "Jellen", "Zalure", "Shifta", "Ryuker", "Resta", "Anti", "Reverser", "Megid"];
            var techBoost = itemPMT.TechBoosts[itemPMT.Armors[Identifier].TechBoost];
            string BoostToString(string techName, float boost) => techName switch
            {
                "Deband" or "Jellen" or "Zalure" or "Shifta" or "Resta" or "Anti" => (boost).ToString("P0") + " Range",
                "Megid" => "Pierce",
                _ => (boost).ToString("P0")
            };
            if (techBoost.Tech1 >= 0) yield return Tuple.Create<string, string>(techNames[techBoost.Tech1], BoostToString(techNames[techBoost.Tech1], techBoost.Boost1));
            if (techBoost.Tech2 >= 0) yield return Tuple.Create<string, string>(techNames[techBoost.Tech2], BoostToString(techNames[techBoost.Tech2], techBoost.Boost2));
            if (techBoost.Tech3 >= 0) yield return Tuple.Create<string, string>(techNames[techBoost.Tech3], BoostToString(techNames[techBoost.Tech3], techBoost.Boost3));
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (DfpBonus != 0) s += $" +{DfpBonus}DFP";
            if (EvpBonus != 0) s += $" +{EvpBonus}EVP";
            return s;
        }
    }

    public class ArmorModel(ItemPMTModel itemPMT) : BaseArmorModel(itemPMT)
    {
        private int numberSlots;

        public int NumberSlots
        {
            get { return numberSlots; }
            set
            {
                if (Identifier == null || value < 0) value = 0;
                if (value > 4) value = 4;
                numberSlots = value;
            }
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (NumberSlots != 0) s += $" ({NumberSlots} slot{(NumberSlots > 1 ? "s" : "")})";
            if (DfpBonus != 0) s += $" +{DfpBonus}DFP";
            if (EvpBonus != 0) s += $" +{EvpBonus}EVP";
            return s;
        }

        public static ArmorModel Parse(ItemPMTModel itemPMT, ItemModel[] armors, string armor)
        {
            ArmorModel armorModel = new(itemPMT);
            Match m = Regex.Match(armor, @"^(.+?)(?: \((\d{1}) slots??\))?(?: \+(\d+?)DFP)?(?: \+(\d+?)EVP)?$", RegexOptions.Singleline);
            if (!m.Success) return armorModel;
            armorModel.Model = armors.FirstOrDefault(i => i.Name == m.Groups[1].Value);
            if (m.Groups[2].Success) armorModel.NumberSlots = int.Parse(m.Groups[2].Value);
            if (m.Groups[3].Success) armorModel.DfpBonus = int.Parse(m.Groups[3].Value);
            if (m.Groups[4].Success) armorModel.EvpBonus = int.Parse(m.Groups[4].Value);
            return armorModel;
        }
    }

    public class UnitModel(ItemPMTModel itemPMT)
    {
        private int modifier;
        private ItemModel? model;

        public ItemModel? Model
        {
            get { return model; }
            set
            {
                model = value;
                if (Identifier == null) return;
            }
        }

        public string? Identifier => Model?.Identifier;
        public string Name => Model?.Name ?? "";

        public int Modifier
        {
            get { return !string.IsNullOrEmpty(Identifier) && itemPMT.Units[Identifier].CanHaveModifier ? modifier : 0; }
            set
            {
                if (string.IsNullOrEmpty(Identifier) || !itemPMT.Units[Identifier].CanHaveModifier) return;
                if (value < -2) value = -2;
                if (value > 2) value = 2;
                modifier = value;
            }
        }

        public IEnumerable<Tuple<string, int>> GetStatBoosts()
        {
            if (string.IsNullOrEmpty(Identifier))
                yield break;

            string[] statNames = ["ATP", "MST", "ATA", "EVP", "HP", "TP", "DFP", "LCK", "All", "EFR", "EIC", "ETH", "ELT", "EDK", "EAll", "ResHP", "ResTP", "ResPB", "Tech", "AtkSpeed", "CureAll", "TrapV", "CurePoison", "CurePara", "CureShock", "CureSlow", "CureConfuse", "CureFreeze", "Unknown28", "Unknown29", "Unknown30", "Unknown31", "Unknown32", "Unknown33", "Unknown34", "Unknown35", "Unknown36", "Unknown37", "Unknown38", "None"];

            switch (statNames[itemPMT.Units[Identifier].Stat])
            {
                case "All":
                    yield return Tuple.Create<string, int>("ATP", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("DFP", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("MST", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("ATA", itemPMT.Units[Identifier].StatAmount / 10);
                    yield return Tuple.Create<string, int>("EVP", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("LCK", itemPMT.Units[Identifier].StatAmount);
                    break;

                case "EAll":
                    yield return Tuple.Create<string, int>("EFR", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("EIC", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("ETH", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("ELT", itemPMT.Units[Identifier].StatAmount);
                    yield return Tuple.Create<string, int>("EDK", itemPMT.Units[Identifier].StatAmount);
                    break;

                case "ResHP":
                case "ResTP":
                case "ResPB":
                case "Tech":
                case "AtkSpeed":
                case "CureAll":
                case "TrapV":
                case "CurePoison":
                case "CurePara":
                case "CureShock":
                case "CureSlow":
                case "CureConfuse":
                case "CureFreeze":
                case "None":
                    break;

                default:
                    yield return Tuple.Create<string, int>(statNames[itemPMT.Units[Identifier].Stat], itemPMT.Units[Identifier].StatAmount + Modifier * itemPMT.Units[Identifier].ModifierAmount);
                    break;
            }
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(Name)) return "";
            var s = $"{Name}";
            if (Modifier > 0) s += new string('+', Modifier);
            if (Modifier < 0) s += new string('-', Modifier * -1);
            return s;
        }

        public static UnitModel Parse(ItemPMTModel itemPMT, ItemModel[] units, string unit)
        {
            UnitModel unitModel = new(itemPMT);
            Match m = Regex.Match(unit, @"^(.+?)([\+\-]+?)?$", RegexOptions.Singleline);
            if (!m.Success) return unitModel;
            unitModel.Model = units.FirstOrDefault(i => i.Name == m.Groups[1].Value);
            if (m.Groups[2].Success) unitModel.Modifier = m.Groups[2].Value.Sum(c => c == '+' ? 1 : c == '-' ? -1 : 0);
            return unitModel;
        }
    }

    public class ShieldModel(ItemPMTModel itemPMT) : BaseArmorModel(itemPMT)
    {
        public static ShieldModel Parse(ItemPMTModel itemPMT, ItemModel[] shields, string shield)
        {
            ShieldModel shieldModel = new(itemPMT);
            Match m = Regex.Match(shield, @"^(.+?)(?: \+(\d+?)DFP)?(?: \+(\d+?)EVP)?$", RegexOptions.Singleline);
            if (!m.Success) return shieldModel;
            shieldModel.Model = shields.FirstOrDefault(i => i.Name == m.Groups[1].Value);
            if (m.Groups[2].Success) shieldModel.DfpBonus = int.Parse(m.Groups[2].Value);
            if (m.Groups[3].Success) shieldModel.EvpBonus = int.Parse(m.Groups[3].Value);
            return shieldModel;
        }
    }

    public class MagModel
    {
        private int def = 5;
        private int pow;
        private int dex;
        private int mind;

        public string Name { get; set; } = "";
        public int Level => Def + Pow + Dex + Mind;

        public int Def
        {
            get { return def; }
            set
            {
                if (value < 5) value = 5;
                if (value > 200) value = 200;
                var total = value + Pow + Dex + Mind;
                if (total > 200) value -= total - 200;
                def = value;
            }
        }

        public int Pow
        {
            get { return pow; }
            set
            {
                if (value < 0) value = 0;
                if (value > 195) value = 195;
                var total = value + Def + Dex + Mind;
                if (total > 200) value -= total - 200;
                pow = value;
            }
        }

        public int Dex
        {
            get { return dex; }
            set
            {
                if (value < 0) value = 0;
                if (value > 195) value = 195;
                var total = value + Def + Pow + Mind;
                if (total > 200) value -= total - 200;
                dex = value;
            }
        }

        public int Mind
        {
            get { return mind; }
            set
            {
                if (value < 0) value = 0;
                if (value > 195) value = 195;
                var total = value + Def + Pow + Dex;
                if (total > 200) value -= total - 200;
                mind = value;
            }
        }

        public override string ToString() => string.IsNullOrEmpty(Name) ? "" : $"{Name} {Def}/{Pow}/{Dex}/{Mind}";

        public static MagModel Parse(string mag)
        {
            MagModel magModel = new();
            Match m = Regex.Match(mag, @"^(.+?) (\d+?)/(\d+?)/(\d+?)/(\d+?)$", RegexOptions.Singleline);
            if (!m.Success) return magModel;
            magModel.Name = m.Groups[1].Value;
            magModel.Def = int.Parse(m.Groups[2].Value);
            magModel.Pow = int.Parse(m.Groups[3].Value);
            magModel.Dex = int.Parse(m.Groups[4].Value);
            magModel.Mind = int.Parse(m.Groups[5].Value);
            return magModel;
        }
    }
}
