@page "/rareDrops"
@using PSOServerWebsite.Services
@inject DropsLocationsService dropsLocationsService

<PageTitle>Rare Drops</PageTitle>

<h1>Rare Drops</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Normal Mode</h2>
    @foreach (var episode in dropsLocations.GroupBy(dl => dl.EpisodeName))
    {
        <h3>@episode.Key</h3>
        @foreach (var difficulty in episode.GroupBy(e => e.DifficultyName))
        {
            <h4>@difficulty.Key</h4>
            <table class="rare-drops table table-striped table-hover table-sm">
                <thead>
                    <tr>
                        <td></td>
                        <SectionId Value="Viridia" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Greenill" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Skyly" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Bluefull" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Purplenum" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Pinkal" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Redria" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Oran" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Yellowboze" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Whitill" Type="SectionId.ComponentType.CellHeader" scope="col" />
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Context="location" Items="GetLocations(difficulty)" SpacerElement="tr" ItemSize="40">
                        <Placeholder>
                            <tr>
                                <th scope="row" colspan="11" class="text-center"><em>Loading...</em></th>
                            </tr>
                        </Placeholder>
                        <ItemContent>
                            <tr>
                                <th scope="row">@location.Key</th>
                                @foreach (var sectionId in GroupBySectionId(location.Value))
                                {
                                    <td>
                                        @if (sectionId.Value.Any())
                                            @foreach (var item in sectionId.Value)
                                            {
                                                <div>
                                                    <ItemName ItemIdentifier="@item.ItemIdentifier" ModalMoreInfo="@modalMoreInfo" /><br />
                                                    <Probability ProbabilityRatio="@item.Probability" class="probability ms-3" />
                                                </div>
                                            }
                                        else
                                        {
                                            <span>None</span>
                                        }
                                    </td>
                                }
                            </tr>
                        </ItemContent>
                    </Virtualize>
                </tbody>
            </table>
        }
    }
}

<ItemMoreInfoModal @ref="modalMoreInfo" OnLoaded="ModalMoreInfoOnLoaded" />

@code {
    [DisallowNull] private IEnumerable<DropLocationModel> dropsLocations = default!;
    [DisallowNull] private ItemMoreInfoModal modalMoreInfo = default!;

    [MemberNotNullWhen(false, nameof(dropsLocations), nameof(modalMoreInfo))]
    private bool IsLoading => dropsLocations == null || modalMoreInfo == null || modalMoreInfoIsLoading;

    protected override async Task OnInitializedAsync()
    {
        dropsLocations = await dropsLocationsService.GetDropsLocationsAsync();
    }

    private bool modalMoreInfoIsLoading = true;
    private void ModalMoreInfoOnLoaded()
    {
        modalMoreInfoIsLoading = false;
        StateHasChanged();
    }

    private Dictionary<string, DropLocationModel[]> GetLocations(IGrouping<string, DropLocationModel> difficulty)
    {
        return difficulty.GroupBy(d => (d.LocationName, d.Order)).OrderBy(l => l.Key.Order).ToDictionary(dl => dl.Key.LocationName, dl => dl.ToArray());
    }

    private Dictionary<string, IEnumerable<DropLocationModel>> GroupBySectionId(DropLocationModel[] dropsLocations)
    {
        return dropsLocations.GroupBy(d => d.SectionId, (s, dl) => (sectionId: s, dropsLocations: dl))
            .UnionBy(EmptySectionsId(), s => s.sectionId).OrderBy(dl => dl.sectionId, new SectionIdComparer())
            .ToDictionary(dl => dl.sectionId, dl => dl.dropsLocations);
    }

    private IEnumerable<(string sectionId, IEnumerable<DropLocationModel> dropsLocations)> EmptySectionsId()
    {
        yield return ("Viridia", Enumerable.Empty<DropLocationModel>());
        yield return ("Greenill", Enumerable.Empty<DropLocationModel>());
        yield return ("Skyly", Enumerable.Empty<DropLocationModel>());
        yield return ("Bluefull", Enumerable.Empty<DropLocationModel>());
        yield return ("Purplenum", Enumerable.Empty<DropLocationModel>());
        yield return ("Pinkal", Enumerable.Empty<DropLocationModel>());
        yield return ("Redria", Enumerable.Empty<DropLocationModel>());
        yield return ("Oran", Enumerable.Empty<DropLocationModel>());
        yield return ("Yellowboze", Enumerable.Empty<DropLocationModel>());
        yield return ("Whitill", Enumerable.Empty<DropLocationModel>());
    }
}
