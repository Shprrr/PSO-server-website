@page "/rareDrops"
@using PSOServerWebsite.Services
@inject RareDropsService rareDropsService
@inject ItemsService itemsService

<PageTitle>Rare Drops</PageTitle>

<h1>Rare Drops</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Normal Mode</h2>
    @foreach (var episode in rareDrops.Normal.Episodes())
    {
        <h3>@episode.Name</h3>
        @foreach (var difficulty in episode.Value!.Difficulties())
        {
            <h4>@difficulty.Name</h4>
            <table class="table table-striped table-hover table-sm">
                <thead>
                    <tr>
                        <td></td>
                        <th class="secid-viridia" scope="col">Viridia</th>
                        <th class="secid-greennill" scope="col">Greenill</th>
                        <th class="secid-skyly" scope="col">Skyly</th>
                        <th class="secid-bluefull" scope="col">Bluefull</th>
                        <th class="secid-purplenum" scope="col">Purplenum</th>
                        <th class="secid-pinkal" scope="col">Pinkal</th>
                        <th class="secid-redria" scope="col">Redria</th>
                        <th class="secid-oran" scope="col">Oran</th>
                        <th class="secid-yellowboze" scope="col">Yellowboze</th>
                        <th class="secid-whitill" scope="col">Whitill</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var where in difficulty.Value!.Where())
                    {
                        <tr>
                            <th scope="row">@where</th>
                            @foreach (var sectionId in difficulty.Value.SectionsId())
                            {
                                <td>
                                    @if (sectionId.ContainsKey(where))
                                        @foreach (var item in sectionId[where])
                                        {
                                            <div>
                                                @if (HasMoreInfo(item.ItemDescription))
                                                {
                                                    <a @attributes="@modalMoreInfo.MoreInfoAttributes" @onclick="@(e => itemMoreInfo = GetItemModel(item.ItemDescription))">@GetItemName(item.ItemDescription)</a>
                                                }
                                                else
                                                {
                                                    <span>@GetItemName(item.ItemDescription)</span>
                                                }
                                                &nbsp;<span class="probability">@item.Probability</span>
                                            </div>
                                        }
                                    else
                                    {
                                        <span>None</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}

<ItemMoreInfoModal @ref="modalMoreInfo" ItemToShow="@itemMoreInfo" OnLoaded="ModalMoreInfoOnLoaded" />

@code {
    [DisallowNull] private RareDropModel rareDrops = default!;
    [DisallowNull] private Dictionary<string, ItemModel> items = default!;
    [DisallowNull] private ItemMoreInfoModal modalMoreInfo = default!;
    private ItemModel? itemMoreInfo;

    [MemberNotNullWhen(false, nameof(rareDrops), nameof(items), nameof(modalMoreInfo))]
    private bool IsLoading => rareDrops == null || items == null || modalMoreInfo == null || modalMoreInfoIsLoading;

    protected override async Task OnInitializedAsync()
    {
        rareDrops = await rareDropsService.GetRareDropsAsync();
        items = (await itemsService.GetItemsAsync()).ToDictionary(i => i.Id);
    }

    private bool modalMoreInfoIsLoading = true;
    private void ModalMoreInfoOnLoaded()
    {
        modalMoreInfoIsLoading = false;
        StateHasChanged();
    }

    private ItemModel? GetItemModel(string itemDescription)
    {
        if (itemDescription.StartsWith("0x") && items.TryGetValue(itemDescription.Substring(2), out var itemModel))
            return itemModel;

        return null;
    }

    private string GetItemName(string itemDescription)
    {
        var itemModel = GetItemModel(itemDescription);
        if (itemModel != null)
            return itemModel.Name;

        return itemDescription;
    }

    private bool HasMoreInfo(string itemDescription)
    {
        return modalMoreInfo.HasMoreInfo(GetItemModel(itemDescription));
    }
}
