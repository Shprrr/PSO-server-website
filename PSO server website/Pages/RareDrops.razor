@page "/rareDrops"
@using PSOServerWebsite.Repositories
@inject RareDropsRepository rareDropsRepository
@inject LocationsRepository locationsRepository
@inject ConfigurationRepository configurationRepository

<PageTitle>Rare Drops</PageTitle>

<h1>Rare Drops</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Normal Mode</h2>
    @foreach (var episode in rareDrops.Normal.Episodes())
    {
        <h3>@episode.Name</h3>
        @foreach (var difficulty in episode.Value!.Difficulties())
        {
            <h4>@difficulty.Name</h4>
            <table class="rare-drops table table-striped table-hover table-sm">
                <thead>
                    <tr>
                        <td></td>
                        <SectionId Value="Viridia" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Greenill" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Skyly" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Bluefull" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Purplenum" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Pinkal" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Redria" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Oran" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Yellowboze" Type="SectionId.ComponentType.CellHeader" scope="col" />
                        <SectionId Value="Whitill" Type="SectionId.ComponentType.CellHeader" scope="col" />
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Context="where" Items="difficulty.Value!.Where().OrderBy(l => OrderByLocations(l, episode.Name)).ToArray()" SpacerElement="tr" ItemSize="40">
                        <Placeholder>
                            <tr>
                                <th scope="row" colspan="11" class="text-center"><em>Loading...</em></th>
                            </tr>
                        </Placeholder>
                        <ItemContent>
                            <tr>
                                <th scope="row">@GetLocationName(where, episode.Name, difficulty.Name)</th>
                                @foreach (var sectionId in difficulty.Value.SectionsId())
                                {
                                    <td>
                                        @if (sectionId.Value.ContainsKey(where))
                                            @foreach (var item in sectionId.Value[where])
                                            {
                                                <div>
                                                    <ItemName ItemIdentifier="@item.ItemDescription" ModalMoreInfo="@modalMoreInfo" /><br />
                                                    <Probability ProbabilityRatio="@config.ApplyDropRateMultiplier(item.Probability)" class="probability ms-3" />
                                                </div>
                                            }
                                        else
                                        {
                                            <span>None</span>
                                        }
                                    </td>
                                }
                            </tr>
                        </ItemContent>
                    </Virtualize>
                </tbody>
            </table>
        }
    }
}

<ItemMoreInfoModal @ref="modalMoreInfo" OnLoaded="ModalMoreInfoOnLoaded" />

@code {
    [DisallowNull] private RareDropModel rareDrops = default!;
    [DisallowNull] private LocationModel[] locations = default!;
    [DisallowNull] private ConfigModel config = default!;
    [DisallowNull] private ItemMoreInfoModal modalMoreInfo = default!;

    [MemberNotNullWhen(false, nameof(rareDrops), nameof(locations), nameof(config), nameof(modalMoreInfo))]
    private bool IsLoading => rareDrops == null || locations == null || config == null || modalMoreInfo == null || modalMoreInfoIsLoading;

    protected override async Task OnInitializedAsync()
    {
        rareDrops = await rareDropsRepository.GetRareDropsAsync();
        locations = (await locationsRepository.GetLocationsAsync()).ToArray();
        config = await configurationRepository.GetConfigAsync();
    }

    private bool modalMoreInfoIsLoading = true;
    private void ModalMoreInfoOnLoaded()
    {
        modalMoreInfoIsLoading = false;
        StateHasChanged();
    }

    private int OrderByLocations(string locationId, string episode)
    {
        int episodeNumber = (int)char.GetNumericValue(episode[^1]);
        return Array.FindIndex(locations.First(l => l.Episode == episodeNumber).Locations, l => l.Id == locationId);
    }

    private string GetLocationName(string locationId, string episode, string difficulty)
    {
        int episodeNumber = (int)char.GetNumericValue(episode[^1]);
        var location = locations.First(l => l.Episode == episodeNumber).Locations.FirstOrDefault(l => l.Id == locationId);
        if (location == null) return locationId;
        if (difficulty == "Ultimate" && !string.IsNullOrEmpty(location.UltimateName))
            return location.UltimateName;
        return location.Name;
    }
}
