@page "/rareDrops"
@using PSOServerWebsite.Services
@inject RareDropsService rareDropsService
@inject ItemsService itemsService

<PageTitle>Rare Drops</PageTitle>

<h1>Rare Drops</h1>

@if (rareDrops == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Normal Mode</h2>
    @foreach (var episode in rareDrops.Normal.Episodes())
    {
        <h3>@episode.Name</h3>
        @foreach (var difficulty in episode.Value!.Difficulties())
        {
            <h4>@difficulty.Name</h4>
            <table class="table">
                <thead>
                    <tr>
                        <td></td>
                        <th class="secid-viridia">Viridia</th>
                        <th class="secid-greennill">Greenill</th>
                        <th class="secid-skyly">Skyly</th>
                        <th class="secid-bluefull">Bluefull</th>
                        <th class="secid-purplenum">Purplenum</th>
                        <th class="secid-pinkal">Pinkal</th>
                        <th class="secid-redria">Redria</th>
                        <th class="secid-oran">Oran</th>
                        <th class="secid-yellowboze">Yellowboze</th>
                        <th class="secid-whitill">Whitill</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var where in difficulty.Value!.Where())
                    {
                        <tr>
                            <th>@where</th>
                            @foreach (var sectionId in difficulty.Value.SectionsId())
                            {
                                <td>
                                    @if (sectionId.ContainsKey(where))
                                        @foreach (var item in sectionId[where])
                                        {
                                            <div>
                                                <span>@GetItemName(item.ItemDescription)</span>
                                                <span class="probability">@item.Probability</span>
                                            </div>
                                        }
                                    else
                                    {
                                        <span>None</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}

@code {
    [MaybeNull] private RareDropModel rareDrops;
    [MaybeNull] private Dictionary<string, ItemModel> items;

    protected override async Task OnInitializedAsync()
    {
        rareDrops = await rareDropsService.GetRareDropsAsync();
        items = (await itemsService.GetItemsAsync()).ToDictionary(i => i.Id);
    }

    private string GetItemName(string itemDescription)
    {
        if (itemDescription.StartsWith("0x") && items!.TryGetValue(itemDescription.Substring(2), out var itemModel))
            return itemModel.Name;

        return itemDescription;
    }
}
