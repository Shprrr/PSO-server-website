@page "/items"
@using PSOServerWebsite.Repositories
@using System.Text.RegularExpressions
@inject ItemsRepository itemsRepository

<PageTitle>Items</PageTitle>

<h1>Items</h1>

@if (IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <InputText DisplayName="Filter" @bind-Value="filter" @bind-Value:after="OnFilterValueChanged" placeholder="Filter name" />

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Identifier</th>
                <th scope="col">Name</th>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itemsFiltered)
            {
                <tr>
                    <td scope="row">@item.Identifier</td>
                    <td><ItemName ItemIdentifier="@item.Identifier" /></td>
                    @if (modalMoreInfo.HasMoreInfo(item))
                    {
                        <td><button type="button" class="btn btn-link" @attributes="@modalMoreInfo.MoreInfoAttributes" @onclick="@(e => modalMoreInfo.ShowItemModal(item))">More info</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

<ItemMoreInfoModal @ref="modalMoreInfo" OnLoaded="ModalMoreInfoOnLoaded" />

@code {
    [DisallowNull] private ItemNameModel[] items = default!;
    private string filter = "";
    private ItemNameModel[]? itemsFiltered;

    [DisallowNull] private ItemMoreInfoModal modalMoreInfo = default!;

    [MemberNotNullWhen(false, nameof(itemsFiltered), nameof(modalMoreInfo))]
    private bool IsLoading => itemsFiltered == null || modalMoreInfo == null || modalMoreInfoIsLoading;

    protected override async Task OnInitializedAsync()
    {
        items = (await itemsRepository.GetItemsAsync()).ToArray();
        OnFilterValueChanged();
    }

    private bool modalMoreInfoIsLoading = true;
    private void ModalMoreInfoOnLoaded()
    {
        modalMoreInfoIsLoading = false;
        StateHasChanged();
    }

    private void OnFilterValueChanged()
    {
        if (string.IsNullOrEmpty(filter))
            itemsFiltered = items;
        else
            itemsFiltered = items.Where(i => Regex.IsMatch(i.Name, filter, RegexOptions.IgnoreCase)).ToArray();
    }
}
