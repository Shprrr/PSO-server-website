@using PSOServerWebsite.Services
@using System.Text.RegularExpressions
@inherits InputBase<TValue>
@typeparam TValue
@inject IJSRuntime JS

<div class="d-flex">
    <div @ref="dropdown" class="dropdown w-100" @attributes="AdditionalAttributes">
        <input class="form-select dropdown-toggle" @bind-value="SearchValue" role="search" data-bs-toggle="dropdown" aria-expanded="false"
               @oninput="FilterDataSource" onshow.bs.dropdown="@(async () => ShowDropdownAsync())" onhide.bs.dropdown="@(async () => HideDropdownAsync())" />
        <ul @ref="dropdownMenu" class="dropdown-menu overflow-auto shadow">
            <li><button class="dropdown-item @(IdMember(Value) == null ? "active" : "")" onclick="@(async () => SelectedValueChangeAsync(null))"><i>~ None ~</i></button></li>
            @foreach (var item in DataSourceFiltered)
            {
                <li><button class="dropdown-item @(IdMember(Value) == IdMember(item) ? "active" : "")" onclick="@(async () => SelectedValueChangeAsync(IdMember(item)))"><ItemName ItemIdentifier="@IdMember(item)" /></button></li>
            }
        </ul>
    </div>
    @if (typeof(TValue) == typeof(ItemModel))
        @Tooltip

</div>

<script>bootstrap.Dropdown.Default.popperConfig = { strategy: "fixed" };</script>

@code {
    public static RenderFragment Tooltip = __builder =>
    {
        <button class="btn btn-small bi bi-question-circle" data-bs-toggle="tooltip" data-bs-html="true"
                data-bs-title="You can search by name or by an attribute.<br />&quot;type:&quot; to filter by item type or by attack animation for a weapon.<br />Ex: type:Dagger<br />Ex: type:Armor<br />Don't put spaces in attribute values.<br />Ex: type:DoubleSaber"></button>
        <script>[...document.querySelectorAll('[data-bs-toggle="tooltip"]')].map (t => new bootstrap.Tooltip(t));</script>
    };

    [Parameter]
    public IEnumerable<TValue> DataSource { get; set; } = [];

    [Parameter]
    public Func<TValue?, string?> IdMember { get; set; } = (i) => i?.ToString();

    [Parameter]
    public Func<TValue?, string?> DisplayMember { get; set; } = (i) => i?.ToString();

    private ElementReference dropdown;
    private ElementReference dropdownMenu;

    public string? SearchValue { get; set; }
    private IEnumerable<TValue> DataSourceFiltered { get; set; } = [];

    private async ValueTask ShowDropdownAsync()
    {
        await JS.InvokeVoidAsync("updateDropdownMenu", dropdown, dropdownMenu);
    }

    private async ValueTask HideDropdownAsync()
    {
        await JS.InvokeVoidAsync("stopUpdateDropdownMenu", dropdown, dropdownMenu);
    }

    private void FilterDataSource(ChangeEventArgs eventArgs)
    {
        SearchValue = (string?)eventArgs.Value;
        if (typeof(TValue) == typeof(ItemModel))
            DataSourceFiltered = (IEnumerable<TValue>)FilterItems(DataSource.Cast<ItemModel>(), SearchValue);
        else
            DataSourceFiltered = DataSource.Where(i => string.IsNullOrWhiteSpace(SearchValue) || SearchValue == DisplayMember(i) ? true : DisplayMember(i)!.StartsWith(SearchValue, StringComparison.CurrentCultureIgnoreCase));
    }

    private async Task SelectedValueChangeAsync(string? newId)
    {
        Value = DataSource.SingleOrDefault(i => IdMember(i) == newId);
        await ValueChanged.InvokeAsync(Value);
        SearchValue = DisplayMember(Value);
        // Recreate filtered data source with everything to be able to select something else easily.
        DataSourceFiltered = DataSource.Where(i => true);
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        SearchValue = DisplayMember(Value);
        // Recreate filtered data source with everything to be able to select something else easily.
        DataSourceFiltered = DataSource.Where(i => true);
        base.OnParametersSet();
    }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue>(value, System.Globalization.CultureInfo.CurrentCulture, out result))
        {
            validationErrorMessage = "";
            return true;
        }
        else
        {
            validationErrorMessage = "Can't convert from string.";
            return false;
        }
    }

    public static IEnumerable<ItemModel> FilterItems(IEnumerable<ItemModel> items, string? filter)
    {
        if (string.IsNullOrEmpty(filter))
            return items;
        else
            return items.Where(i =>
            {
                var typeMatch = Regex.Match(filter, @"type[:=](\w+)", RegexOptions.IgnoreCase);
                if (typeMatch.Success)
                {
                    var type = typeMatch.Groups[1].Value;
                    return i.ItemType.ToString().Equals(type, StringComparison.OrdinalIgnoreCase)
                        || i.ItemType == ItemType.Weapon && i.AsWeapon.AttackAnimation.ToString().Equals(type, StringComparison.OrdinalIgnoreCase);
                }

                return Regex.IsMatch(i.ItemName, filter, RegexOptions.IgnoreCase);
            });
    }
}
