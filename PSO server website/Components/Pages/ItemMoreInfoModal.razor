@using PSOServerWebsite.Services
@inject DropsLocationsService dropsLocationsService

<div id="modalInfo" class="modal fade">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <span>@GetItemType()</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (itemInfo != null)
                {
                    <ItemName ItemIdentifier="@itemInfo.ItemIdentifier" class="modal-title h2" />
                    @switch (itemInfo.ItemType)
                    {
                        case ItemType.Weapon:
                            <div class="container">
                                <div class="row">
                                    <div class="col">Id</div>
                                    <div class="col">@itemInfo.AsWeapon.ItemId.ToString("X6") (@itemInfo.AsWeapon.ItemId)</div>
                                </div>
                                <div class="row">
                                    <div class="col">Type</div>
                                    <div class="col">@itemInfo.AsWeapon.Type</div>
                                </div>
                                <div class="row">
                                    <div class="col">Skin Id</div>
                                    <div class="col">@itemInfo.AsWeapon.Skin</div>
                                </div>
                                <div class="row">
                                    <div class="col">Team Points</div>
                                    <div class="col">@itemInfo.AsWeapon.TeamPoints</div>
                                </div>
                                <div class="row">
                                    <div class="col">Class Can Use</div>
                                    <div class="col"><ClassFlags Value="@itemInfo.AsWeapon.EquipableClass" /></div>
                                </div>
                                <div class="row">
                                    <div class="col">ATP Required</div>
                                    <div class="col">@itemInfo.AsWeapon.ATPRequired</div>
                                </div>
                                <div class="row">
                                    <div class="col">MST Required</div>
                                    <div class="col">@itemInfo.AsWeapon.MSTRequired</div>
                                </div>
                                <div class="row">
                                    <div class="col">ATA Required</div>
                                    <div class="col">@itemInfo.AsWeapon.ATARequired</div>
                                </div>
                                <div class="row">
                                    <div class="col">+ATP</div>
                                    <div class="col">@itemInfo.AsWeapon.ATPMin - @itemInfo.AsWeapon.ATPMax</div>
                                </div>
                                <div class="row">
                                    <div class="col">+MST</div>
                                    <div class="col">@itemInfo.AsWeapon.MST</div>
                                </div>
                                <div class="row">
                                    <div class="col">+ATA</div>
                                    <div class="col">@itemInfo.AsWeapon.ATA</div>
                                </div>
                                @foreach (var statBoost in itemInfo.StatBoosts)
                                {
                                    <div class="row">
                                        <div class="col">@statBoost.Name</div>
                                        <div class="col">@statBoost.ValueToString()</div>
                                    </div>
                                }
                                @foreach (var techBoost in itemInfo.TechBoosts)
                                {
                                    <div class="row">
                                        <div class="col">@techBoost.Name</div>
                                        <div class="col">@techBoost.ValueToString()</div>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col">Max Grind</div>
                                    <div class="col">@itemInfo.AsWeapon.MaxGrind</div>
                                </div>
                                <div class="row">
                                    <div class="col">Photon Id</div>
                                    <div class="col">@itemInfo.AsWeapon.PhotonId</div>
                                </div>
                                <div class="row">
                                    <div class="col">Special</div>
                                    <div class="col">@itemInfo.AsWeapon.SpecialName</div>
                                </div>
                                <div class="row">
                                    <div class="col">Projectile Id</div>
                                    <div class="col">@itemInfo.AsWeapon.ProjectileId</div>
                                </div>
                                <div class="row">
                                    <div class="col">Combo Type</div>
                                    <div class="col">@itemInfo.AsWeapon.ComboTypeFlag</div>
                                </div>
                            </div>
                            break;
                        case ItemType.Armor or ItemType.Shield:
                            <div class="container">
                                <div class="row">
                                    <div class="col">Id</div>
                                    <div class="col">@itemInfo.AsArmor.ItemId.ToString("X6") (@itemInfo.AsArmor.ItemId)</div>
                                </div>
                                <div class="row">
                                    <div class="col">Type</div>
                                    <div class="col">@itemInfo.AsArmor.Type</div>
                                </div>
                                <div class="row">
                                    <div class="col">Skin Id</div>
                                    <div class="col">@itemInfo.AsArmor.Skin</div>
                                </div>
                                <div class="row">
                                    <div class="col">Team Points</div>
                                    <div class="col">@itemInfo.AsArmor.TeamPoints</div>
                                </div>
                                <div class="row">
                                    <div class="col">Class Can Use</div>
                                    <div class="col"><ClassFlags Value="@itemInfo.AsArmor.EquipableClass" /></div>
                                </div>
                                <div class="row">
                                    <div class="col">Level Required</div>
                                    <div class="col">@itemInfo.AsArmor.RequiredLevel</div>
                                </div>
                                <div class="row">
                                    <div class="col">+DFP</div>
                                    <div class="col">@itemInfo.AsArmor.DFP - @itemInfo.AsArmor.DFPMax</div>
                                </div>
                                <div class="row">
                                    <div class="col">+EVP</div>
                                    <div class="col">@itemInfo.AsArmor.EVP - @itemInfo.AsArmor.EVPMax</div>
                                </div>
                                <div class="row">
                                    <div class="col">+EFR</div>
                                    <div class="col">@itemInfo.AsArmor.EFR</div>
                                </div>
                                <div class="row">
                                    <div class="col">+ETH</div>
                                    <div class="col">@itemInfo.AsArmor.ETH</div>
                                </div>
                                <div class="row">
                                    <div class="col">+EIC</div>
                                    <div class="col">@itemInfo.AsArmor.EIC</div>
                                </div>
                                <div class="row">
                                    <div class="col">+EDK</div>
                                    <div class="col">@itemInfo.AsArmor.EDK</div>
                                </div>
                                <div class="row">
                                    <div class="col">+ELT</div>
                                    <div class="col">@itemInfo.AsArmor.ELT</div>
                                </div>
                                @foreach (var statBoost in itemInfo.StatBoosts)
                                {
                                    <div class="row">
                                        <div class="col">@statBoost.Name</div>
                                        <div class="col">@statBoost.ValueToString()</div>
                                    </div>
                                }
                                @foreach (var techBoost in itemInfo.TechBoosts)
                                {
                                    <div class="row">
                                        <div class="col">@techBoost.Name</div>
                                        <div class="col">@techBoost.ValueToString()</div>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col">Block Particle</div>
                                    <div class="col">@itemInfo.AsArmor.BlockParticle</div>
                                </div>
                                <div class="row">
                                    <div class="col">Block Effect</div>
                                    <div class="col">@itemInfo.AsArmor.BlockEffect</div>
                                </div>
                            </div>
                            break;
                        case ItemType.Unit:
                            <div class="container">
                                <div class="row">
                                    <div class="col">Id</div>
                                    <div class="col">@itemInfo.AsUnit.ItemId.ToString("X6") (@itemInfo.AsUnit.ItemId)</div>
                                </div>
                                <div class="row">
                                    <div class="col">Team Points</div>
                                    <div class="col">@itemInfo.AsUnit.TeamPoints</div>
                                </div>
                                <div class="row">
                                    <div class="col">Class Can Use</div>
                                    <div class="col"><ClassFlags Value="@itemInfo.AsUnit.EquipableClass" /></div>
                                </div>
                                @foreach (var statBoost in itemInfo.StatBoosts)
                                {
                                    <div class="row">
                                        <div class="col">@statBoost.Name</div>
                                        <div class="col">@statBoost.ValueToString()</div>
                                    </div>
                                }
                                @if (itemInfo.AsUnit.CanHaveModifier)
                                {
                                    <div class="row">
                                        <div class="col">Modifier Amount</div>
                                        <div class="col">@itemInfo.AsUnit.ModifierAmount</div>
                                    </div>
                                }
                            </div>
                            break;
                        case ItemType.Tool:
                            <div class="container">
                                <div class="row">
                                    <div class="col">Id</div>
                                    <div class="col">@itemInfo.AsTool.ItemId.ToString("X6") (@itemInfo.AsTool.ItemId)</div>
                                </div>
                                <div class="row">
                                    <div class="col">Type</div>
                                    <div class="col">@itemInfo.AsTool.Type</div>
                                </div>
                                <div class="row">
                                    <div class="col">Skin Id</div>
                                    <div class="col">@itemInfo.AsTool.Skin</div>
                                </div>
                                <div class="row">
                                    <div class="col">Team Points</div>
                                    <div class="col">@itemInfo.AsTool.TeamPoints</div>
                                </div>
                                <div class="row">
                                    <div class="col">Amount</div>
                                    <div class="col">@itemInfo.AsTool.Amount</div>
                                </div>
                                <div class="row">
                                    <div class="col">Technique</div>
                                    <div class="col">@itemInfo.AsTool.Technique</div>
                                </div>
                                <div class="row">
                                    <div class="col">Cost</div>
                                    <div class="col">@itemInfo.AsTool.Cost</div>
                                </div>
                                <div class="row">
                                    <div class="col">Item Flag</div>
                                    <div class="col">@itemInfo.AsTool.ItemFlag</div>
                                </div>
                            </div>
                            break;
                    }

                    <span class="modal-title h3">Where to find</span>
                    <table class="table table-striped table-hover table-sm">
                        <tbody>
                            @foreach (var location in GetItemLocations())
                            {
                                <tr>
                                    <td>@location.DifficultyName</td>
                                    <td class="text-nowrap">@location.EpisodeName</td>
                                    <td>
                                        @location.LocationName
                                        @if (location.Modifier != null)
                                        {
                                            <div class="ms-2 text-secondary">(@location.Modifier)</div>
                                        }
                                    </td>
                                    <td><SectionId Value="@location.SectionId" /></td>
                                    <td><Probability ProbabilityRatio="@location.Probability" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="modal-footer">@itemInfo?.ItemIdentifier</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Action? OnLoaded { get; set; } = null;

    private ItemModel? itemInfo;
    [DisallowNull] private IEnumerable<DropLocationModel> dropsLocations = default!;

    public Dictionary<string, object> MoreInfoAttributes => new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#modalInfo" }, { "href", "#modalInfo" } };

    protected override async Task OnInitializedAsync()
    {
        dropsLocations = await dropsLocationsService.GetDropsLocationsAsync();

        OnLoaded?.Invoke();
    }

    private string? oldItemIdentifier;
    protected override bool ShouldRender()
    {
        bool shouldRender = oldItemIdentifier != itemInfo?.ItemIdentifier;
        oldItemIdentifier = itemInfo?.ItemIdentifier;
        return shouldRender;
    }

    public void ShowItemModal(ItemModel item)
    {
        if (HasMoreInfo(item))
        {
            itemInfo = item;
        }
        else
            itemInfo = null;
        if (oldItemIdentifier != itemInfo?.ItemIdentifier) StateHasChanged();
    }

    public bool HasMoreInfo([NotNullWhen(true)] ItemModel? item)
    {
        if (item == null) return false;
        return item.ItemType != ItemType.Mag;
    }

    public string GetItemType() => itemInfo?.ItemType switch
    {
        ItemType.Weapon => "Weapon",
        ItemType.Armor => "Armor",
        ItemType.Shield => "Shield",
        ItemType.Unit => "Unit",
        ItemType.Mag => "Mag",
        ItemType.Tool => "Item",
        _ => ""
    };

    private IEnumerable<DropLocationModel> GetItemLocations()
    {
        if (itemInfo?.ItemIdentifier == null) return [];

        return dropsLocations.Where(dl => dl.ItemIdentifier == itemInfo?.ItemIdentifier);
    }
}
