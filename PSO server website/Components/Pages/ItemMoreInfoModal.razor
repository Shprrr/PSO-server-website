@using PSOServerWebsite.Repositories
@using PSOServerWebsite.Services
@inject DropsLocationsService dropsLocationsService
@inject ItemPMTRepository itemPMTRepository
@inject ConfigurationRepository configurationRepository

<div id="modalInfo" class="modal fade">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <span>@GetItemType()</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (itemInfo != null)
                {
                    <ItemName ItemIdentifier="@itemInfo.ItemModel.Identifier" class="modal-title h2" />
                    @if (itemInfo.WeaponModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.WeaponModel.Id.ToString("X6") (@(itemInfo.WeaponModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.WeaponModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.WeaponModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.WeaponModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.WeaponModel.ClassFlags" /></div>
                            </div>
                            <div class="row">
                                <div class="col">ATP Required</div>
                                <div class="col">@itemInfo.WeaponModel.ATPRequired</div>
                            </div>
                            <div class="row">
                                <div class="col">MST Required</div>
                                <div class="col">@itemInfo.WeaponModel.MSTRequired</div>
                            </div>
                            <div class="row">
                                <div class="col">ATA Required</div>
                                <div class="col">@itemInfo.WeaponModel.ATARequired</div>
                            </div>
                            <div class="row">
                                <div class="col">+ATP</div>
                                <div class="col">@itemInfo.WeaponModel.ATPMin - @itemInfo.WeaponModel.ATPMax</div>
                            </div>
                            <div class="row">
                                <div class="col">+MST</div>
                                <div class="col">@itemInfo.WeaponModel.MST</div>
                            </div>
                            <div class="row">
                                <div class="col">+ATA</div>
                                <div class="col">@itemInfo.WeaponModel.ATA</div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Name</div>
                                    <div class="col">@statBoost.ValueToString()</div>
                                </div>
                            }
                            @foreach (var techBoost in GetTechBoosts())
                            {
                                <div class="row">
                                    <div class="col">@techBoost.Name</div>
                                    <div class="col">@techBoost.ValueToString()</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Max Grind</div>
                                <div class="col">@itemInfo.WeaponModel.MaxGrind</div>
                            </div>
                            <div class="row">
                                <div class="col">Photon Id</div>
                                <div class="col">@itemInfo.WeaponModel.Photon</div>
                            </div>
                            <div class="row">
                                <div class="col">Special</div>
                                <div class="col">@GetSpecialName()</div>
                            </div>
                            <div class="row">
                                <div class="col">Projectile Id</div>
                                <div class="col">@itemInfo.WeaponModel.Projectile</div>
                            </div>
                            <div class="row">
                                <div class="col">Combo Type</div>
                                <div class="col">@itemInfo.WeaponModel.ComboType</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.ArmorModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.ArmorModel.Id.ToString("X6") (@(itemInfo.ArmorModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.ArmorModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.ArmorModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.ArmorModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.ArmorModel.ClassFlags" /></div>
                            </div>
                            <div class="row">
                                <div class="col">Level Required</div>
                                <div class="col">@(itemInfo.ArmorModel.RequiredLevel + 1)</div>
                            </div>
                            <div class="row">
                                <div class="col">+DFP</div>
                                <div class="col">@itemInfo.ArmorModel.DFP - @(itemInfo.ArmorModel.DFP + itemInfo.ArmorModel.DFPRange)</div>
                            </div>
                            <div class="row">
                                <div class="col">+EVP</div>
                                <div class="col">@itemInfo.ArmorModel.EVP - @(itemInfo.ArmorModel.EVP + itemInfo.ArmorModel.EVPRange)</div>
                            </div>
                            <div class="row">
                                <div class="col">+EFR</div>
                                <div class="col">@itemInfo.ArmorModel.EFR</div>
                            </div>
                            <div class="row">
                                <div class="col">+ETH</div>
                                <div class="col">@itemInfo.ArmorModel.ETH</div>
                            </div>
                            <div class="row">
                                <div class="col">+EIC</div>
                                <div class="col">@itemInfo.ArmorModel.EIC</div>
                            </div>
                            <div class="row">
                                <div class="col">+EDK</div>
                                <div class="col">@itemInfo.ArmorModel.EDK</div>
                            </div>
                            <div class="row">
                                <div class="col">+ELT</div>
                                <div class="col">@itemInfo.ArmorModel.ELT</div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Name</div>
                                    <div class="col">@statBoost.ValueToString()</div>
                                </div>
                            }
                            @foreach (var techBoost in GetTechBoosts())
                            {
                                <div class="row">
                                    <div class="col">@techBoost.Name</div>
                                    <div class="col">@techBoost.ValueToString()</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Block Particle</div>
                                <div class="col">@itemInfo.ArmorModel.BlockParticle</div>
                            </div>
                            <div class="row">
                                <div class="col">Block Effect</div>
                                <div class="col">@itemInfo.ArmorModel.BlockEffect</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.UnitModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.UnitModel.Id.ToString("X6") (@(itemInfo.UnitModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.UnitModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.UnitModel.ClassFlags" /></div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Name</div>
                                    <div class="col">@statBoost.ValueToString()</div>
                                </div>
                            }
                            @if (itemInfo.UnitModel.CanHaveModifier)
                            {
                                <div class="row">
                                    <div class="col">Modifier Amount</div>
                                    <div class="col">@itemInfo.UnitModel.ModifierAmount</div>
                                </div>
                            }
                        </div>
                    }
                    else if (itemInfo.ToolModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.ToolModel.Id.ToString("X6") (@(itemInfo.ToolModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.ToolModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.ToolModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.ToolModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Amount</div>
                                <div class="col">@itemInfo.ToolModel.Amount</div>
                            </div>
                            <div class="row">
                                <div class="col">Technique</div>
                                <div class="col">@itemInfo.ToolModel.Technique</div>
                            </div>
                            <div class="row">
                                <div class="col">Cost</div>
                                <div class="col">@itemInfo.ToolModel.Cost</div>
                            </div>
                            <div class="row">
                                <div class="col">Item Flag</div>
                                <div class="col">@itemInfo.ToolModel.ItemFlag</div>
                            </div>
                        </div>
                    }

                    <span class="modal-title h3">Where to find</span>
                    <table class="table table-striped table-hover table-sm">
                        <tbody>
                            @foreach (var location in GetItemLocations())
                            {
                                <tr>
                                    <td>@location.DifficultyName</td>
                                    <td class="text-nowrap">@location.EpisodeName</td>
                                    <td>@location.Location</td>
                                    <td><SectionId Value="@location.SectionId" /></td>
                                    <td><Probability ProbabilityRatio="@location.Probability" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="modal-footer">@itemInfo?.ItemModel.Identifier</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Action? OnLoaded { get; set; } = null;

    private ItemInfoModel? itemInfo;
    [DisallowNull] private ItemPMTModel itemPMT = default!;
    [DisallowNull] private IEnumerable<DropLocationModel> dropsLocations = default!;
    [DisallowNull] private ConfigModel config = default!;
    [DisallowNull] private Dictionary<string, ItemRareDropLocation[]> questF95EByItem = default!;

    public Dictionary<string, object> MoreInfoAttributes => new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#modalInfo" }, { "href", "#modalInfo" } };

    protected override async Task OnInitializedAsync()
    {
        itemPMT = await itemPMTRepository.GetItemsAsync();

        config = await configurationRepository.GetConfigAsync();

        dropsLocations = await dropsLocationsService.GetDropsLocationsAsync();

        questF95EByItem = config.ConvertQuestF95EResultItems().Types()
            .SelectMany(t => t.Value.Difficulties(), (type, difficulties) => (type, difficulties))
            .SelectMany(q => q.difficulties.Value, (q, item) =>
            {
                var chances = 1;
                if (q.type.Name.StartsWith("Black Paper's Dangerous Deal 1"))
                    chances = q.difficulties.Name switch
                    {
                        "Hard" => 2,
                        "Very Hard" => 3,
                        "Ultimate" => 4,
                        _ => 1
                    };
                if (q.type.Name == "Black Paper's Dangerous Deal 2" && (q.difficulties.Name == "Very Hard" || q.difficulties.Name == "Ultimate"))
                    chances = 2;
                ItemRareDropLocation itemRareDropLocation = new ItemRareDropLocation("Episode 4", q.difficulties.Name, "", q.type.Name, $"{chances}/{q.difficulties.Value.Length}");
                return (ItemDescription: item, itemRareDropLocation);
            })
            .GroupBy(q => q.ItemDescription).ToDictionary(q => q.Key, d => d.Select(d => d.Item2).ToArray());

        OnLoaded?.Invoke();
    }

    private string? oldItemIdentifier;
    protected override bool ShouldRender()
    {
        bool shouldRender = oldItemIdentifier != itemInfo?.ItemModel.Identifier;
        oldItemIdentifier = itemInfo?.ItemModel.Identifier;
        return shouldRender;
    }

    public void ShowItemModal(ItemModel item)
    {
        if (HasMoreInfo(item))
        {
            itemPMT.Weapons.TryGetValue(item.Identifier, out var weaponModel);
            itemPMT.Armors.TryGetValue(item.Identifier, out var armorModel);
            itemPMT.Units.TryGetValue(item.Identifier, out var unitModel);
            itemPMT.Tools.TryGetValue(item.Identifier, out var toolModel);
            itemInfo = new ItemInfoModel(item, weaponModel, armorModel, unitModel, toolModel);
        }
        else
            itemInfo = null;
        if (oldItemIdentifier != itemInfo?.ItemModel.Identifier) StateHasChanged();
    }

    public bool HasMoreInfo([NotNullWhen(true)] ItemModel? item)
    {
        if (item == null) return false;
        return itemPMT.Weapons.ContainsKey(item.Identifier) || itemPMT.Armors.ContainsKey(item.Identifier) || itemPMT.Units.ContainsKey(item.Identifier) || itemPMT.Tools.ContainsKey(item.Identifier);
    }

    public string GetItemType()
    {
        if (itemInfo == null) return "";
        if (itemInfo.WeaponModel != null) return "Weapon";
        if (itemInfo.ArmorModel != null) return "Armor";
        if (itemInfo.UnitModel != null) return "Unit";
        if (itemInfo.ToolModel != null) return "Item";
        return "";
    }

    public string GetSpecialName()
    {
        if (itemInfo?.WeaponModel == null)
            return "";

        string[] names = ["None", "[1]Draw", "[2]Drain", "[3]Fill", "[4]Gush", "[1]Heart", "[2]Mind", "[3]Soul", "[4]Geist", "[1]Master's", "[2]Lord's", "[3]King's", "Charge", "Spirit", "Berserk", "[1]Ice", "[2]Frost", "[3]Freeze", "[4]Blizzard", "[1]Bind", "[2]Hold", "[3]Seize", "[4]Arrest", "[1]Heat", "[2]Fire", "[3]Flame", "[4]Burning", "[1]Shock", "[2]Thunder", "[3]Storm", "[4]Tempest", "[1]Dim", "[2]Shadow", "[3]Dark", "[4]Hell", "[1]Panic", "[2]Riot", "[3]Havoc", "[4]Chaos", "[1]Devil's", "[2]Demon's"];
        return names[itemInfo.WeaponModel.Special];
    }

    public IEnumerable<Stat> GetStatBoosts()
    {
        if (itemInfo?.WeaponModel != null)
            return itemInfo.WeaponModel.GetStatBoosts();

        if (itemInfo?.ArmorModel != null)
            return itemInfo.ArmorModel.GetStatBoosts();

        if (itemInfo?.UnitModel != null)
            return itemInfo.UnitModel.GetStatBoosts();

        return Enumerable.Empty<Stat>();
    }

    public IEnumerable<Tech> GetTechBoosts()
    {
        if (itemInfo?.WeaponModel != null)
            return itemInfo.WeaponModel.GetTechBoosts();

        if (itemInfo?.ArmorModel != null)
            return itemInfo.ArmorModel.GetTechBoosts();

        return Enumerable.Empty<Tech>();
    }

    private IEnumerable<ItemRareDropLocation> GetItemLocations()
    {
        List<ItemRareDropLocation> enumerable = [];
        if (itemInfo?.ItemModel.Identifier == null) return enumerable;

        var dropLocations = dropsLocations.Where(dl => dl.ItemIdentifier == "0x" + itemInfo?.ItemModel.Identifier);
        enumerable.AddRange(dropLocations.Select(dl => new ItemRareDropLocation(dl.EpisodeName, dl.DifficultyName, dl.SectionId, dl.LocationName, dl.Probability, dl.Order)));

        if (questF95EByItem.TryGetValue(itemInfo?.ItemModel.Identifier!, out var questF95ELocations))
            enumerable.AddRange(questF95ELocations);

        enumerable.AddRange(config.QuestF95FResultItems.Where(q => q.ItemDescription == itemInfo?.ItemModel.Identifier).Select(q => new ItemRareDropLocation("Episode 1", "", "", $"Gallon's Plan exchange {q.NumPhotonTickets} Photon Ticket", "1/1")));

        enumerable.AddRange(config.SecretLotteryResultItems.Where(i => i == itemInfo?.ItemModel.Identifier).Select(i => new ItemRareDropLocation("Episode 1", "", "", $"Good Luck! exchange Secret Ticket", $"1/{config.SecretLotteryResultItems.Length}")));

        enumerable.AddRange(config.QuestF960SuccessResultItems.SelectMany(q => q.ItemsByDay.SelectMany(i => i.Value, (q, i) => (q.Key, i)).Where(i => i.i.Equals(itemInfo?.ItemModel.Name, StringComparison.InvariantCultureIgnoreCase)).Select(i => new ItemRareDropLocation("", "", "", $"Coren {q.MesetaCost.ToString("N0")} Meseta {i.Key}", $"1/{q.ItemsByDay[i.Key].Length}"))));

        enumerable.AddRange(config.QuestF960FailureResultItems.SelectMany(q => q.Value.Where(i => i.Replace(" x1", "") == itemInfo?.ItemModel.Name).Select(i => new ItemRareDropLocation("", "", "", $"Coren Failure {q.Key}", $"1/{q.Value.Length}"))));

        switch (itemInfo?.ItemModel.Identifier)
        {
            case "000103":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                    ]);
                break;

            case "000104":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                    ]);
                break;

            case "000107":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"),
                    ]);
                break;

            case "000200":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"));
                break;

            case "000202":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"));
                break;

            case "000204":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"));
                break;

            case "000207":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Hunter 1‑3:Subterranean Den", "1/1"));
                break;

            case "000302":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000303":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000304":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000307":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Hunter 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000403":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"),
                    ]);
                break;

            case "000404":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"),
                    ]);
                break;

            case "000406":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"));
                break;

            case "000500":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"));
                break;

            case "000502":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"));
                break;

            case "000504":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"));
                break;

            case "000507":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Hunter 3‑3:Central Control", "1/1"));
                break;

            case "000603":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                    ]);
                break;

            case "000604":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                    ]);
                break;

            case "000607":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Hunter 6‑5:Test/Spaceship 5", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"),
                    ]);
                break;

            case "000700":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"));
                break;

            case "000702":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"));
                break;

            case "000704":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"));
                break;

            case "000706":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Ranger 5‑5:Test/VR Temple 5", "1/1"));
                break;

            case "000707":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Ranger 1‑3:Subterranean Den", "1/1"));
                break;

            case "000800":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000802":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000804":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000807":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Ranger 2‑4:Waterway Shadow", "1/1"));
                break;

            case "000900":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"));
                break;

            case "000902":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"));
                break;

            case "000904":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"));
                break;

            case "000906":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Ranger 6‑5:Test/Spaceship 5", "1/1"));
                break;

            case "000907":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Ranger 3‑3:Central Control", "1/1"));
                break;

            case "000B05":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Force 6‑5:Test/Spaceship 5", "1/1"));
                break;

            case "000D00":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Hunter 5‑5:Test/VR Temple 5", "1/1"));
                break;

            case "000E00":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Force 5‑5:Test/VR Temple 5", "1/1"));
                break;

            case "008900":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"));
                break;

            case "008901":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Hunter 7‑5:Isle of Mutants", "1/1"));
                break;

            case "008B00":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"));
                break;

            case "008B01":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Ranger 7‑5:Isle of Mutants", "1/1"));
                break;

            case "008C01":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Force 7‑5:Isle of Mutants", "1/1"));
                break;

            case "030200":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Force 5‑5:Test/VR Temple 5", "1/1"));
                break;

            case "030201":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Force 5‑5:Test/VR Temple 5", "1/1"));
                break;

            case "030202":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Force 5‑5:Test/VR Temple 5", "1/1"));
                break;

            case "030203":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Force 6‑5:Test/Spaceship 5", "1/1"));
                break;

            case "030204":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Force 6‑5:Test/Spaceship 5", "1/1"));
                break;

            case "030205":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Force 6‑5:Test/Spaceship 5", "1/1"));
                break;

            case "030206":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Force 7‑5:Isle of Mutants", "1/1"));
                break;

            case "030207":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Force 7‑5:Isle of Mutants", "1/1"));
                break;

            case "030208":
                enumerable.Add(new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Force 7‑5:Isle of Mutants", "1/1"));
                break;

            case "03020A":
            case "03020C":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Force 3‑3:Central Control", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Force 3‑3:Central Control", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Force 3‑3:Central Control", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Force 3‑3:Central Control", "1/1")
                    ]);
                break;

            case "03020B":
            case "03020D":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Force 2‑4:Waterway Shadow", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Force 2‑4:Waterway Shadow", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Force 2‑4:Waterway Shadow", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Force 2‑4:Waterway Shadow", "1/1")
                    ]);
                break;

            case "03020F":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Governement Quests Force 1‑3:Subterranean Den", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Governement Quests Force 1‑3:Subterranean Den", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Governement Quests Force 1‑3:Subterranean Den", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Ultimate", "", "Governement Quests Force 1‑3:Subterranean Den", "1/1")
                    ]);
                break;

            case "031004":
                enumerable.AddRange([
                        new ItemRareDropLocation("Episode 1", "Normal", "", "Say yes to Alicia on Gallon's Plan", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Hard", "", "Say yes to Alicia on Gallon's Plan", "1/1"),
                        new ItemRareDropLocation("Episode 1", "Very Hard", "", "Say yes to Alicia on Gallon's Plan", "2/1"),
                        new ItemRareDropLocation("Episode 1", "Ultimate", "", "Say yes to Alicia on Gallon's Plan", "2/1")
                    ]);
                break;
        }

        return enumerable.OrderBy(OrderByLocations);
    }

    private int OrderByLocations(ItemRareDropLocation dropLocation)
    {
        int episodeNumber = string.IsNullOrEmpty(dropLocation.EpisodeName) ? 0 : (int)char.GetNumericValue(dropLocation.EpisodeName[^1]);
        int DifficultyNameToOrder(string name) => name switch
        {
            "Normal" or "" => 0,
            "Hard" => 1,
            "Very Hard" => 2,
            "Ultimate" => 3,
            _ => throw new NotSupportedException()
        };
        int SectionIdNameToId(string name) => name switch
        {
            "Viridia" or "" => 0,
            "Greenill" => 1,
            "Skyly" => 2,
            "Bluefull" => 3,
            "Purplenum" => 4,
            "Pinkal" => 5,
            "Redria" => 6,
            "Oran" => 7,
            "Yellowboze" => 8,
            "Whitill" => 9,
            _ => throw new NotSupportedException()
        };
        return DifficultyNameToOrder(dropLocation.DifficultyName) * 100_000 + episodeNumber * 10000 + dropLocation.Order * 10 + SectionIdNameToId(dropLocation.SectionId);
    }

    private class ItemInfoModel(ItemModel itemModel, WeaponModel? weaponModel, ArmorModel? armorModel, UnitModel? unitModel, ToolModel? toolModel)
    {
        public ItemModel ItemModel { get; set; } = itemModel;
        public WeaponModel? WeaponModel { get; set; } = weaponModel;
        public ArmorModel? ArmorModel { get; set; } = armorModel;
        public UnitModel? UnitModel { get; set; } = unitModel;
        public ToolModel? ToolModel { get; set; } = toolModel;
    }

    private class ItemRareDropLocation(string episodeName, string difficultyName, string sectionId, string location, string probability, int order = 0)
    {
        public ItemRareDropLocation(NamedObject<EpisodeModel> episode, NamedObject<DifficultyModel> difficulty, NamedObject<SectionIdModel> sectionId, string location, string probability) : this(episode.Name, difficulty.Name, sectionId.Name, location, probability)
        {
        }

        public string EpisodeName { get; set; } = episodeName;
        public string DifficultyName { get; set; } = difficultyName;
        public string SectionId { get; set; } = sectionId;
        public string Location { get; set; } = location;
        public int Order { get; set; } = order;
        public string Probability { get; set; } = probability;
    }
}
