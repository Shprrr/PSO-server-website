@using PSOServerWebsite.Services
@inject ItemPMTService itemPMTService
@inject RareDropsService rareDropsService
@inject LocationsService locationsService
@inject ConfigService configService

<div id="modalInfo" class="modal">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <span>@GetItemType()</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (itemInfo != null)
                {
                    <span class="modal-title h2">@itemInfo.ItemModel.Name</span>
                    @if (itemInfo.WeaponModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.WeaponModel.Id.ToString("X6") (@(itemInfo.WeaponModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.WeaponModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.WeaponModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.WeaponModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.WeaponModel.ClassFlags" /></div>
                            </div>
                            <div class="row">
                                <div class="col">ATP Required</div>
                                <div class="col">@itemInfo.WeaponModel.ATPRequired</div>
                            </div>
                            <div class="row">
                                <div class="col">MST Required</div>
                                <div class="col">@itemInfo.WeaponModel.MSTRequired</div>
                            </div>
                            <div class="row">
                                <div class="col">ATA Required</div>
                                <div class="col">@itemInfo.WeaponModel.ATARequired</div>
                            </div>
                            <div class="row">
                                <div class="col">+ATP</div>
                                <div class="col">@itemInfo.WeaponModel.ATPMin - @itemInfo.WeaponModel.ATPMax</div>
                            </div>
                            <div class="row">
                                <div class="col">+MST</div>
                                <div class="col">@itemInfo.WeaponModel.MST</div>
                            </div>
                            <div class="row">
                                <div class="col">+ATA</div>
                                <div class="col">@itemInfo.WeaponModel.ATA</div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Name</div>
                                    <div class="col">@statBoost.ValueToString()</div>
                                </div>
                            }
                            @foreach (var techBoost in GetTechBoosts())
                            {
                                <div class="row">
                                    <div class="col">@techBoost.Name</div>
                                    <div class="col">@techBoost.ValueToString()</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Max Grind</div>
                                <div class="col">@itemInfo.WeaponModel.MaxGrind</div>
                            </div>
                            <div class="row">
                                <div class="col">Photon Id</div>
                                <div class="col">@itemInfo.WeaponModel.Photon</div>
                            </div>
                            <div class="row">
                                <div class="col">Special</div>
                                <div class="col">@GetSpecialName()</div>
                            </div>
                            <div class="row">
                                <div class="col">Projectile Id</div>
                                <div class="col">@itemInfo.WeaponModel.Projectile</div>
                            </div>
                            <div class="row">
                                <div class="col">Combo Type</div>
                                <div class="col">@itemInfo.WeaponModel.ComboType</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.ArmorModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.ArmorModel.Id.ToString("X6") (@(itemInfo.ArmorModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.ArmorModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.ArmorModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.ArmorModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.ArmorModel.ClassFlags" /></div>
                            </div>
                            <div class="row">
                                <div class="col">Level Required</div>
                                <div class="col">@(itemInfo.ArmorModel.RequiredLevel + 1)</div>
                            </div>
                            <div class="row">
                                <div class="col">+DFP</div>
                                <div class="col">@itemInfo.ArmorModel.DFP - @(itemInfo.ArmorModel.DFP + itemInfo.ArmorModel.DFPRange)</div>
                            </div>
                            <div class="row">
                                <div class="col">+EVP</div>
                                <div class="col">@itemInfo.ArmorModel.EVP - @(itemInfo.ArmorModel.EVP + itemInfo.ArmorModel.EVPRange)</div>
                            </div>
                            <div class="row">
                                <div class="col">+EFR</div>
                                <div class="col">@itemInfo.ArmorModel.EFR</div>
                            </div>
                            <div class="row">
                                <div class="col">+ETH</div>
                                <div class="col">@itemInfo.ArmorModel.ETH</div>
                            </div>
                            <div class="row">
                                <div class="col">+EIC</div>
                                <div class="col">@itemInfo.ArmorModel.EIC</div>
                            </div>
                            <div class="row">
                                <div class="col">+EDK</div>
                                <div class="col">@itemInfo.ArmorModel.EDK</div>
                            </div>
                            <div class="row">
                                <div class="col">+ELT</div>
                                <div class="col">@itemInfo.ArmorModel.ELT</div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Name</div>
                                    <div class="col">@statBoost.ValueToString()</div>
                                </div>
                            }
                            @foreach (var techBoost in GetTechBoosts())
                            {
                                <div class="row">
                                    <div class="col">@techBoost.Name</div>
                                    <div class="col">@techBoost.ValueToString()</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Block Particle</div>
                                <div class="col">@itemInfo.ArmorModel.BlockParticle</div>
                            </div>
                            <div class="row">
                                <div class="col">Block Effect</div>
                                <div class="col">@itemInfo.ArmorModel.BlockEffect</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.UnitModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.UnitModel.Id.ToString("X6") (@(itemInfo.UnitModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.UnitModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.UnitModel.ClassFlags" /></div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Name</div>
                                    <div class="col">@statBoost.ValueToString()</div>
                                </div>
                            }
                            @if (itemInfo.UnitModel.CanHaveModifier)
                            {
                                <div class="row">
                                    <div class="col">Modifier Amount</div>
                                    <div class="col">@itemInfo.UnitModel.ModifierAmount</div>
                                </div>
                            }
                        </div>
                    }
                    else if (itemInfo.ToolModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.ToolModel.Id.ToString("X6") (@(itemInfo.ToolModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.ToolModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.ToolModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.ToolModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Amount</div>
                                <div class="col">@itemInfo.ToolModel.Amount</div>
                            </div>
                            <div class="row">
                                <div class="col">Technique</div>
                                <div class="col">@itemInfo.ToolModel.Technique</div>
                            </div>
                            <div class="row">
                                <div class="col">Cost</div>
                                <div class="col">@itemInfo.ToolModel.Cost</div>
                            </div>
                            <div class="row">
                                <div class="col">Item Flag</div>
                                <div class="col">@itemInfo.ToolModel.ItemFlag</div>
                            </div>
                        </div>
                    }

                    <span class="modal-title h3">Where to find</span>
                    <table class="table table-striped table-hover table-sm">
                        <tbody>
                            @foreach (var location in GetItemLocations())
                            {
                                <tr>
                                    <td>@location.DifficultyName</td>
                                    <td class="text-nowrap">@location.EpisodeName</td>
                                    <td>@GetLocationName(location.Location, location.EpisodeName, location.DifficultyName)</td>
                                    <td><span class="badge secid-@location.SectionId.ToLowerInvariant()">@location.SectionId</span></td>
                                    <td>@location.Probability</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
            <div class="modal-footer">@itemInfo?.ItemModel.Identifier</div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ItemModel? ItemToShow { get; set; } = null;

    [Parameter]
    public Action? OnLoaded { get; set; } = null;

    private ItemInfoModel? itemInfo;
    [DisallowNull] private ItemPMTModel itemPMT = default!;
    [DisallowNull] private Dictionary<string, ItemRareDropLocation[]> rareDropsByItem = default!;
    [DisallowNull] private LocationModel[] locations = default!;
    [DisallowNull] private ConfigModel config = default!;
    [DisallowNull] private Dictionary<string, ItemRareDropLocation[]> questF95EByItem = default!;

    public Dictionary<string, object> MoreInfoAttributes => new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#modalInfo" }, { "href", "#modalInfo" } };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (HasMoreInfo(ItemToShow))
        {
            itemPMT.Weapons.TryGetValue(ItemToShow.Identifier, out var weaponModel);
            itemPMT.Armors.TryGetValue(ItemToShow.Identifier, out var armorModel);
            itemPMT.Units.TryGetValue(ItemToShow.Identifier, out var unitModel);
            itemPMT.Tools.TryGetValue(ItemToShow.Identifier, out var toolModel);
            itemInfo = new ItemInfoModel(ItemToShow, weaponModel, armorModel, unitModel, toolModel);
        }
        else
            itemInfo = null;
    }

    protected override async Task OnInitializedAsync()
    {
        itemPMT = await itemPMTService.GetItemsAsync();

        var rareDrops = await rareDropsService.GetRareDropsAsync();
        rareDropsByItem = rareDrops.Normal.Episodes().SelectMany(e => e.Value.Difficulties(), (episode, difficulty) => (episode, difficulty))
            .SelectMany(d => d.difficulty.Value.SectionsId(), (ed, sectionId) => (ed.episode, ed.difficulty, sectionId))
            .SelectMany(d => d.sectionId.Value, (eds, rare) => (eds.episode, eds.difficulty, eds.sectionId, location: rare.Key, rareSpecification: rare.Value))
            .SelectMany(d => d.rareSpecification, (edsr, spec) => new ItemRareDropLocation(edsr.episode, edsr.difficulty, edsr.sectionId, edsr.location, spec.Probability, spec.ItemDescription))
            .GroupBy(d => d.ItemDescription).ToDictionary(d => d.Key, d => d.ToArray());

        locations = (await locationsService.GetLocationsAsync()).ToArray();

        config = await configService.GetConfigAsync();
        questF95EByItem = config.ConvertQuestF95EResultItems().Types()
            .SelectMany(t => t.Value.Difficulties(), (type, difficulties) => (type, difficulties))
            .SelectMany(q => q.difficulties.Value, (q, item) => new ItemRareDropLocation("Episode 4", q.difficulties.Name, "", q.type.Name, $"1/{q.difficulties.Value.Length}", item))
            .GroupBy(q => q.ItemDescription).ToDictionary(q => q.Key, d => d.ToArray());

        OnLoaded?.Invoke();
    }

    public bool HasMoreInfo([NotNullWhen(true)] ItemModel? item)
    {
        if (item == null) return false;
        return itemPMT.Weapons.ContainsKey(item.Identifier) || itemPMT.Armors.ContainsKey(item.Identifier) || itemPMT.Units.ContainsKey(item.Identifier) || itemPMT.Tools.ContainsKey(item.Identifier);
    }

    public string GetItemType()
    {
        if (itemInfo == null) return "";
        if (itemInfo.WeaponModel != null) return "Weapon";
        if (itemInfo.ArmorModel != null) return "Armor";
        if (itemInfo.UnitModel != null) return "Unit";
        if (itemInfo.ToolModel != null) return "Item";
        return "";
    }

    public string GetSpecialName()
    {
        if (itemInfo?.WeaponModel == null)
            return "";

        string[] names = ["None", "Draw", "Drain", "Fill", "Gush", "Heart", "Mind", "Soul", "Geist", "Master's", "Lord's", "King's", "Charge", "Spirit", "Berserk", "Ice", "Frost", "Freeze", "Blizzard", "Bind", "Hold", "Seize", "Arrest", "Heat", "Fire", "Flame", "Burning", "Shock", "Thunder", "Storm", "Tempest", "Dim", "Shadow", "Dark", "Hell", "Panic", "Riot", "Havoc", "Chaos", "Devil's", "Demon's"];
        return names[itemInfo.WeaponModel.Special];
    }

    public IEnumerable<Stat> GetStatBoosts()
    {
        if (itemInfo?.WeaponModel != null)
            return itemInfo.WeaponModel.GetStatBoosts();

        if (itemInfo?.ArmorModel != null)
            return itemInfo.ArmorModel.GetStatBoosts();

        if (itemInfo?.UnitModel != null)
            return itemInfo.UnitModel.GetStatBoosts();

        return Enumerable.Empty<Stat>();
    }

    public IEnumerable<Tech> GetTechBoosts()
    {
        if (itemInfo?.WeaponModel != null)
            return itemInfo.WeaponModel.GetTechBoosts();

        if (itemInfo?.ArmorModel != null)
            return itemInfo.ArmorModel.GetTechBoosts();

        return Enumerable.Empty<Tech>();
    }

    private IEnumerable<ItemRareDropLocation> GetItemLocations()
    {
        IEnumerable<ItemRareDropLocation> enumerable = Enumerable.Empty<ItemRareDropLocation>();
        if (ItemToShow?.Identifier == null) return enumerable;

        if (rareDropsByItem.TryGetValue("0x" + ItemToShow?.Identifier, out var dropLocations))
            enumerable = enumerable.Concat(dropLocations);

        if (questF95EByItem.TryGetValue(ItemToShow?.Identifier!, out var questF95ELocations))
            enumerable = enumerable.Concat(questF95ELocations);

        enumerable = enumerable.Concat(config.QuestF95FResultItems.Where(q => q.ItemDescription == ItemToShow?.Identifier).Select(q => new ItemRareDropLocation("Episode 1", "", "", $"Gallon's Plan exchange {q.NumPhotonTickets} tickets", "1/1", q.ItemDescription)));

        enumerable = enumerable.Concat(config.SecretLotteryResultItems.Where(i => i == ItemToShow?.Identifier).Select(i => new ItemRareDropLocation("Episode 1", "", "", $"Good Luck! exchange Secret Lottery Ticket", "1/1", i)));

        return enumerable.OrderBy(OrderByLocations);
    }

    private int OrderByLocations(ItemRareDropLocation dropLocation)
    {
        int episodeNumber = (int)char.GetNumericValue(dropLocation.EpisodeName[^1]);
        int locationIndex = Array.FindIndex(locations.First(l => l.Episode == episodeNumber).Locations, l => l.Id == dropLocation.Location);
        int DifficultyNameToOrder(string name) => name switch
        {
            "Normal" or "" => 0,
            "Hard" => 1,
            "Very Hard" => 2,
            "Ultimate" => 3,
            _ => throw new NotSupportedException()
        };
        int SectionIdNameToId(string name) => name switch
        {
            "Viridia" or "" => 0,
            "Greennill" => 1,
            "Skyly" => 2,
            "Bluefull" => 3,
            "Purplenum" => 4,
            "Pinkal" => 5,
            "Redria" => 6,
            "Oran" => 7,
            "Yellowboze" => 8,
            "Whitill" => 9,
            _ => throw new NotSupportedException()
        };
        return DifficultyNameToOrder(dropLocation.DifficultyName) * 100_000 + episodeNumber * 10000 + locationIndex * 10 + SectionIdNameToId(dropLocation.SectionId);
    }

    private string GetLocationName(string locationId, string episode, string difficulty)
    {
        int episodeNumber = (int)char.GetNumericValue(episode[^1]);
        var location = locations.First(l => l.Episode == episodeNumber).Locations.FirstOrDefault(l => l.Id == locationId);
        if (location == null) return locationId;
        if (difficulty == "Ultimate" && !string.IsNullOrEmpty(location.UltimateName))
            return location.UltimateName;
        return location.Name;
    }

    private class ItemInfoModel(ItemModel itemModel, WeaponModel? weaponModel, ArmorModel? armorModel, UnitModel? unitModel, ToolModel? toolModel)
    {
        public ItemModel ItemModel { get; set; } = itemModel;
        public WeaponModel? WeaponModel { get; set; } = weaponModel;
        public ArmorModel? ArmorModel { get; set; } = armorModel;
        public UnitModel? UnitModel { get; set; } = unitModel;
        public ToolModel? ToolModel { get; set; } = toolModel;
    }

    private class ItemRareDropLocation(string episodeName, string difficultyName, string sectionId, string location, string probability, string itemDescription)
    {
        public ItemRareDropLocation(NamedObject<EpisodeModel> episode, NamedObject<DifficultyModel> difficulty, NamedObject<SectionIdModel> sectionId, string location, string probability, string itemDescription) : this(episode.Name, difficulty.Name, sectionId.Name, location, probability, itemDescription)
        {
        }

        public string EpisodeName { get; set; } = episodeName;
        public string DifficultyName { get; set; } = difficultyName;
        public string SectionId { get; set; } = sectionId;
        public string Location { get; set; } = location;
        public string Probability { get; set; } = probability;
        public string ItemDescription { get; set; } = itemDescription;
    }
}
