@using PSOServerWebsite.Services
@inject ItemPMTService itemPMTService

<div id="modalInfo" class="modal">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <span>@GetItemType()</span><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (itemInfo != null)
                {
                    <span class="modal-title h2">@itemInfo.ItemModel.Name</span>
                    @if (itemInfo.WeaponModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.WeaponModel.Id.ToString("X6") (@(itemInfo.WeaponModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.WeaponModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.WeaponModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.WeaponModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.WeaponModel.ClassFlags" /></div>
                            </div>
                            <div class="row">
                                <div class="col">ATP Required</div>
                                <div class="col">@itemInfo.WeaponModel.ATPRequired</div>
                            </div>
                            <div class="row">
                                <div class="col">MST Required</div>
                                <div class="col">@itemInfo.WeaponModel.MSTRequired</div>
                            </div>
                            <div class="row">
                                <div class="col">ATA Required</div>
                                <div class="col">@itemInfo.WeaponModel.ATARequired</div>
                            </div>
                            <div class="row">
                                <div class="col">+ATP</div>
                                <div class="col">@itemInfo.WeaponModel.ATPMin - @itemInfo.WeaponModel.ATPMax</div>
                            </div>
                            <div class="row">
                                <div class="col">+MST</div>
                                <div class="col">@itemInfo.WeaponModel.MST</div>
                            </div>
                            <div class="row">
                                <div class="col">+ATA</div>
                                <div class="col">@itemInfo.WeaponModel.ATA</div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Key</div>
                                    <div class="col">@statBoost.Value</div>
                                </div>
                            }
                            @foreach (var techBoost in GetTechBoosts())
                            {
                                <div class="row">
                                    <div class="col">@techBoost.Key</div>
                                    <div class="col">@techBoost.Value</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Max Grind</div>
                                <div class="col">@itemInfo.WeaponModel.MaxGrind</div>
                            </div>
                            <div class="row">
                                <div class="col">Photon Id</div>
                                <div class="col">@itemInfo.WeaponModel.Photon</div>
                            </div>
                            <div class="row">
                                <div class="col">Special</div>
                                <div class="col">@GetSpecialName()</div>
                            </div>
                            <div class="row">
                                <div class="col">Projectile Id</div>
                                <div class="col">@itemInfo.WeaponModel.Projectile</div>
                            </div>
                            <div class="row">
                                <div class="col">Combo Type</div>
                                <div class="col">@itemInfo.WeaponModel.ComboType</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.ArmorModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.ArmorModel.Id.ToString("X6") (@(itemInfo.ArmorModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.ArmorModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.ArmorModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.ArmorModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.ArmorModel.ClassFlags" /></div>
                            </div>
                            <div class="row">
                                <div class="col">Level Required</div>
                                <div class="col">@(itemInfo.ArmorModel.RequiredLevel + 1)</div>
                            </div>
                            <div class="row">
                                <div class="col">+DFP</div>
                                <div class="col">@itemInfo.ArmorModel.DFP - @(itemInfo.ArmorModel.DFP + itemInfo.ArmorModel.DFPRange)</div>
                            </div>
                            <div class="row">
                                <div class="col">+EVP</div>
                                <div class="col">@itemInfo.ArmorModel.EVP - @(itemInfo.ArmorModel.EVP + itemInfo.ArmorModel.EVPRange)</div>
                            </div>
                            <div class="row">
                                <div class="col">+EFR</div>
                                <div class="col">@itemInfo.ArmorModel.EFR</div>
                            </div>
                            <div class="row">
                                <div class="col">+ETH</div>
                                <div class="col">@itemInfo.ArmorModel.ETH</div>
                            </div>
                            <div class="row">
                                <div class="col">+EIC</div>
                                <div class="col">@itemInfo.ArmorModel.EIC</div>
                            </div>
                            <div class="row">
                                <div class="col">+EDK</div>
                                <div class="col">@itemInfo.ArmorModel.EDK</div>
                            </div>
                            <div class="row">
                                <div class="col">+ELT</div>
                                <div class="col">@itemInfo.ArmorModel.ELT</div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Key</div>
                                    <div class="col">@statBoost.Value</div>
                                </div>
                            }
                            @foreach (var techBoost in GetTechBoosts())
                            {
                                <div class="row">
                                    <div class="col">@techBoost.Key</div>
                                    <div class="col">@techBoost.Value</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Block Particle</div>
                                <div class="col">@itemInfo.ArmorModel.BlockParticle</div>
                            </div>
                            <div class="row">
                                <div class="col">Block Effect</div>
                                <div class="col">@itemInfo.ArmorModel.BlockEffect</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.UnitModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.UnitModel.Id.ToString("X6") (@(itemInfo.UnitModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.UnitModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Class Can Use</div>
                                <div class="col"><ClassFlags Value="@itemInfo.UnitModel.ClassFlags" /></div>
                            </div>
                            @foreach (var statBoost in GetStatBoosts())
                            {
                                <div class="row">
                                    <div class="col">@statBoost.Key</div>
                                    <div class="col">@statBoost.Value</div>
                                </div>
                            }
                            <div class="row">
                                <div class="col">Modifier Amount</div>
                                <div class="col">@itemInfo.UnitModel.ModifierAmount</div>
                            </div>
                        </div>
                    }
                    else if (itemInfo.ToolModel != null)
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col">Id</div>
                                <div class="col">@itemInfo.ToolModel.Id.ToString("X6") (@(itemInfo.ToolModel.Id))</div>
                            </div>
                            <div class="row">
                                <div class="col">Type</div>
                                <div class="col">@itemInfo.ToolModel.Type</div>
                            </div>
                            <div class="row">
                                <div class="col">Skin Id</div>
                                <div class="col">@itemInfo.ToolModel.Skin</div>
                            </div>
                            <div class="row">
                                <div class="col">Team Points</div>
                                <div class="col">@itemInfo.ToolModel.TeamPoints</div>
                            </div>
                            <div class="row">
                                <div class="col">Amount</div>
                                <div class="col">@itemInfo.ToolModel.Amount</div>
                            </div>
                            <div class="row">
                                <div class="col">Technique</div>
                                <div class="col">@itemInfo.ToolModel.Technique</div>
                            </div>
                            <div class="row">
                                <div class="col">Cost</div>
                                <div class="col">@itemInfo.ToolModel.Cost</div>
                            </div>
                            <div class="row">
                                <div class="col">Item Flag</div>
                                <div class="col">@itemInfo.ToolModel.ItemFlag</div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">@itemInfo?.ItemModel.Identifier</div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ItemModel? ItemToShow { get; set; } = null;

    [Parameter]
    public Action? OnLoaded { get; set; } = null;

    private ItemInfoModel? itemInfo;
    [DisallowNull] private ItemPMTModel itemPMT = default!;

    public Dictionary<string, object> MoreInfoAttributes => new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#modalInfo" }, { "href", "#modalInfo" } };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (HasMoreInfo(ItemToShow))
        {
            itemPMT.Weapons.TryGetValue(ItemToShow.Identifier, out var weaponModel);
            itemPMT.Armors.TryGetValue(ItemToShow.Identifier, out var armorModel);
            itemPMT.Units.TryGetValue(ItemToShow.Identifier, out var unitModel);
            itemPMT.Tools.TryGetValue(ItemToShow.Identifier, out var toolModel);
            itemInfo = new ItemInfoModel(ItemToShow, weaponModel, armorModel, unitModel, toolModel);
        }
        else
            itemInfo = null;
    }

    protected override async Task OnInitializedAsync()
    {
        itemPMT = await itemPMTService.GetItemsAsync();
        OnLoaded?.Invoke();
    }

    public bool HasMoreInfo([NotNullWhen(true)] ItemModel? item)
    {
        if (item == null) return false;
        return itemPMT.Weapons.ContainsKey(item.Identifier) || itemPMT.Armors.ContainsKey(item.Identifier) || itemPMT.Units.ContainsKey(item.Identifier) || itemPMT.Tools.ContainsKey(item.Identifier);
    }

    public string GetItemType()
    {
        if (itemInfo == null) return "";
        if (itemInfo.WeaponModel != null) return "Weapon";
        if (itemInfo.ArmorModel != null) return "Armor";
        if (itemInfo.UnitModel != null) return "Unit";
        if (itemInfo.ToolModel != null) return "Item";
        return "";
    }

    public string GetSpecialName()
    {
        if (itemInfo?.WeaponModel == null)
            return "";

        string[] names = ["None", "Draw", "Drain", "Fill", "Gush", "Heart", "Mind", "Soul", "Geist", "Master's", "Lord's", "King's", "Charge", "Spirit", "Berserk", "Ice", "Frost", "Freeze", "Blizzard", "Bind", "Hold", "Seize", "Arrest", "Heat", "Fire", "Flame", "Burning", "Shock", "Thunder", "Storm", "Tempest", "Dim", "Shadow", "Dark", "Hell", "Panic", "Riot", "Havoc", "Chaos", "Devil's", "Demon's"];
        return names[itemInfo.WeaponModel.Special];
    }

    public IEnumerable<KeyValuePair<string, ushort>> GetStatBoosts()
    {
        if (itemInfo?.WeaponModel != null || itemInfo?.ArmorModel != null)
        {
            string[] statNames = ["None", "+ATP", "+ATA", "+EVP", "+DFP", "+MST", "+HP", "+LCK", "+All", "-ATP", "-ATA", "-EVP", "-DFP", "-MST", "-HP", "-LCK", "-All"];
            var statBoost = itemPMT.StatBoosts[itemInfo.WeaponModel?.StatBoost ?? itemInfo.ArmorModel!.StatBoost];
            if (statBoost.Stat1 != 0) yield return new KeyValuePair<string, ushort>(statNames[statBoost.Stat1], statBoost.Amount1);
            if (statBoost.Stat2 != 0) yield return new KeyValuePair<string, ushort>(statNames[statBoost.Stat2], statBoost.Amount2);
        }

        if (itemInfo?.UnitModel != null)
        {
            string[] statNames = ["+ATP", "+MST", "+ATA", "+EVP", "+HP", "+TP", "+DFP", "+LCK", "All", "+EFR", "+EIC", "+ETH", "+ELT", "+EDK", "EAll", "ResHP", "ResTP", "ResPB", "Tech", "AtkSpeed", "CureAll", "TrapV", "CurePoison", "CurePara", "CureShock", "CureSlow", "CureConfuse", "CureFreeze", "Unknown28", "Unknown29", "Unknown30", "Unknown31", "Unknown32", "Unknown33", "Unknown34", "Unknown35", "Unknown36", "Unknown37", "Unknown38", "None"];

            switch (statNames[itemInfo.UnitModel.Stat])
            {
                case "All":
                    yield return new KeyValuePair<string, ushort>("+ATP", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+DFP", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+MST", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+ATA", (ushort)(itemInfo.UnitModel.StatAmount / 10));
                    yield return new KeyValuePair<string, ushort>("+EVP", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+LCK", itemInfo.UnitModel.StatAmount);
                    break;

                case "EAll":
                    yield return new KeyValuePair<string, ushort>("+EFR", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+EIC", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+ETH", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+ELT", itemInfo.UnitModel.StatAmount);
                    yield return new KeyValuePair<string, ushort>("+EDK", itemInfo.UnitModel.StatAmount);
                    break;

                case "ResHP":
                case "ResTP":
                case "ResPB":
                case "Tech":
                case "AtkSpeed":
                case "CureAll":
                case "TrapV":
                case "CurePoison":
                case "CurePara":
                case "CureShock":
                case "CureSlow":
                case "CureConfuse":
                case "CureFreeze":
                case "None":
                    break;

                default:
                    yield return new KeyValuePair<string, ushort>(statNames[itemInfo.UnitModel.Stat], itemInfo.UnitModel.StatAmount);
                    break;
            }
        }
    }

    public IEnumerable<KeyValuePair<string, string>> GetTechBoosts()
    {
        if (itemInfo?.WeaponModel == null && itemInfo?.ArmorModel == null) yield break;

        string[] techNames = ["Foie", "Gifoie", "Rafoie", "Barta", "Gibarta", "Rabarta", "Zonde", "Gizonde", "Razonde", "Grants", "Deband", "Jellen", "Zalure", "Shifta", "Ryuker", "Resta", "Anti", "Reverser", "Megid"];
        var techBoost = itemPMT.TechBoosts[itemInfo.WeaponModel?.TechBoost ?? itemInfo.ArmorModel!.TechBoost];
        string BoostToString(string techName, float boost) => techName switch
        {
            "Deband" or "Jellen" or "Zalure" or "Shifta" or "Resta" or "Anti" => (boost).ToString("P0") + " Range",
            "Megid" => "Pierce",
            _ => (boost).ToString("P0")
        };
        if (techBoost.Tech1 >= 0) yield return new KeyValuePair<string, string>(techNames[techBoost.Tech1], BoostToString(techNames[techBoost.Tech1], techBoost.Boost1));
        if (techBoost.Tech2 >= 0) yield return new KeyValuePair<string, string>(techNames[techBoost.Tech2], BoostToString(techNames[techBoost.Tech2], techBoost.Boost2));
        if (techBoost.Tech3 >= 0) yield return new KeyValuePair<string, string>(techNames[techBoost.Tech3], BoostToString(techNames[techBoost.Tech3], techBoost.Boost3));
    }

    private class ItemInfoModel(ItemModel itemModel, WeaponModel? weaponModel, ArmorModel? armorModel, UnitModel? unitModel, ToolModel? toolModel)
    {
        public ItemModel ItemModel { get; set; } = itemModel;
        public WeaponModel? WeaponModel { get; set; } = weaponModel;
        public ArmorModel? ArmorModel { get; set; } = armorModel;
        public UnitModel? UnitModel { get; set; } = unitModel;
        public ToolModel? ToolModel { get; set; } = toolModel;
    }
}
