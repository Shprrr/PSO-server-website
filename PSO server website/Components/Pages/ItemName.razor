@using PSOServerWebsite.Services
@inject ItemsService itemsService

@if (IsLoading)
{
    <span @attributes="@CapturedAttributes">@ItemIdentifier</span>
}
else if (HasMoreInfo())
{
    <a @attributes="@AttributesForLink" @onclick="@(() => ModalMoreInfo.ShowItemModal(itemModel))">
        @if (!string.IsNullOrEmpty(GetIconName()))
        {
            <img src="img/32px-@GetIconName()_icon.png" alt="@GetIconName()" class="icon" />
        }
        @GetItemName()
    </a>
}
else
{
    <span @attributes="@CapturedAttributes">
        @if (!string.IsNullOrEmpty(GetIconName()))
        {
            <img src="img/32px-@GetIconName()_icon.png" alt="@GetIconName()" class="icon" />
        }
        @GetItemName()
    </span>
}

@code {
    [Parameter, EditorRequired]
    public required string ItemIdentifier { get; set; }
    [Parameter]
    public ItemMoreInfoModal? ModalMoreInfo { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? CapturedAttributes { get; set; }
    private Dictionary<string, object> AttributesForLink
    {
        get
        {
            var attributes = new Dictionary<string, object>(ModalMoreInfo!.MoreInfoAttributes);
            foreach (var (key, value) in CapturedAttributes ?? new Dictionary<string, object>())
            {
                attributes[key] = value;
            }
            return attributes;
        }
    }

    [MemberNotNullWhen(false, nameof(itemModel))]
    private bool IsLoading => itemModel == null;

    private ItemModel? itemModel;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        itemModel = itemsService.GetItem(ItemIdentifier.Replace("0x", ""));
    }

    [MemberNotNullWhen(true, nameof(ModalMoreInfo), nameof(itemModel))]
    public bool HasMoreInfo()
    {
        return ModalMoreInfo?.HasMoreInfo(itemModel) ?? false;
    }

    public string GetItemName() => itemModel != null ? itemModel.ItemName : ItemIdentifier;

    private string? GetIconName() => itemModel?.Icon switch
    {
        ItemIcon.Sword => "Sword",
        ItemIcon.Gun => "Gun",
        ItemIcon.Cane => "Cane",
        ItemIcon.Armor => "Frame",
        ItemIcon.Shield => "Shield",
        ItemIcon.Unit => "Unit",
        ItemIcon.Mag => "Mag",
        ItemIcon.Mate => "Mate",
        ItemIcon.Fluid => "Fluid",
        ItemIcon.Disk => "Disk",
        ItemIcon.Tool => "Tool",
        _ => null
    };
}
